{
	"info": {
		"_postman_id": "e931e1d0-4a4c-4b51-8f72-51bcc1710562",
		"name": "EPIC03_TaskManagement",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17538466"
	},
	"item": [
		{
			"name": "executeProcessPublishmentVersion",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ProcessPublishmentVersion correctly added\", () => {",
							"    pm.response.to.have.status(204);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/processPublishmentVersion/execute?processPublishmentVersionId={{processPublishmentVersionId}}&userId={{userId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"processPublishmentVersion",
						"execute"
					],
					"query": [
						{
							"key": "processPublishmentVersionId",
							"value": "{{processPublishmentVersionId}}"
						},
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getExecutionsOfUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Empty execution list correctly retrieved\", () => {",
							"    pm.response.to.have.status(200);",
							"    ",
							"    var responseBody = pm.response.json()[0];",
							"",
							"    // Assert if id exists and is not null",
							"    pm.expect(responseBody).to.have.property('id');",
							"    pm.expect(responseBody.id).to.not.be.null;",
							"",
							"",
							"    // Set execution id in environment variable",
							"    pm.environment.set('executionId', responseBody.id);",
							"    // Set execution id in environment variable",
							"    pm.environment.set('processPublishmentVersionId', responseBody.processPublishmentVersionId);",
							"    // Set main task id as mainTaskId in environment variable",
							"    pm.environment.set('mainTaskId', responseBody.mainTaskId);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/execution/get/userId?userId={{userId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"execution",
						"get",
						"userId"
					],
					"query": [
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getTasksOfExecution",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Executions correctly retrieved\", () => {",
							"    pm.response.to.have.status(200);",
							"    ",
							"    var responseBody = pm.response.json();",
							"",
							"    var task1 = responseBody[0];",
							"    var task2 = responseBody[1];",
							"",
							"    // Set task 1 id as mainTaskId in environment variable",
							"    pm.environment.set('mainTaskId', task1.id);",
							"    // Set task 2 id as subTaskId to collection variable",
							"    pm.collectionVariables.set('subTaskId', task2.id);",
							"    pm.collectionVariables.set('subTaskId2', responseBody[2].id);",
							"    pm.collectionVariables.set('subTaskId3', responseBody[3].id);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/task/get/executionId?executionId={{executionId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"task",
						"get",
						"executionId"
					],
					"query": [
						{
							"key": "executionId",
							"value": "{{executionId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getTask",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Executions correctly retrieved\", () => {",
							"    pm.response.to.have.status(200);",
							"    ",
							"    var task = pm.response.json();",
							"",
							"    pm.expect(task).to.not.be.null;",
							"",
							"    ",
							"    pm.expect(task).to.have.property('id');",
							"    pm.expect(task.id).to.not.be.null;",
							"    ",
							"    pm.expect(task).to.have.property('executionId');",
							"    pm.expect(task.executionId).to.not.be.null;",
							"    pm.expect(task.executionId).to.equal(pm.environment.get('executionId'));",
							"    ",
							"    pm.expect(task).to.have.property('processPublishmentVersionId');",
							"    pm.expect(task.processPublishmentVersionId).to.not.be.null;",
							"",
							"    pm.expect(task).to.have.property('processInfoId');",
							"    pm.expect(task.processInfoId).to.not.be.null;",
							"",
							"    pm.expect(task).to.have.property('parentTaskId');",
							"    pm.expect(task.parentTaskId).to.not.be.null;",
							"",
							"    pm.expect(task).to.have.property('taskStatus');",
							"    pm.expect(task.taskStatus).to.not.be.null;",
							"    pm.expect(task.taskStatus).to.equal(0);",
							"    ",
							"    pm.expect(task).to.have.property('processInfo');",
							"    pm.expect(task.processInfo).to.not.be.null;",
							"    pm.expect(task.processInfo).to.have.property('name');",
							"    pm.expect(task.processInfo.name).to.not.be.null;",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/task/get/taskId?taskId={{subTaskId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"task",
						"get",
						"taskId"
					],
					"query": [
						{
							"key": "taskId",
							"value": "{{subTaskId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "claimTask",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Executions correctly retrieved\", () => {",
							"    pm.response.to.have.status(200);",
							"    ",
							"    var task = pm.response.json();",
							"",
							"    pm.expect(task).to.not.be.null;",
							"",
							"    pm.expect(task).to.have.property('id');",
							"    pm.expect(task.id).to.not.be.null;",
							"    pm.expect(task.id).to.equal(pm.collectionVariables.get('subTaskId'));",
							"",
							"    pm.expect(task).to.have.property('taskStatus');",
							"    pm.expect(task.taskStatus).to.not.be.null;",
							"    pm.expect(task.taskStatus).to.equal(0);",
							"",
							"    pm.expect(task).to.have.property('claimedByUserId');",
							"    pm.expect(task.claimedByUserId).to.not.be.null;",
							"    pm.expect(task.claimedByUserId).to.equal(pm.environment.get('userId'));",
							"",
							"    pm.expect(task).to.have.property('concludedByUserId');",
							"    pm.expect(task.concludedByUserId).to.be.null;",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/task/claim?taskId={{subTaskId}}&userId={{userId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"task",
						"claim"
					],
					"query": [
						{
							"key": "taskId",
							"value": "{{subTaskId}}"
						},
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "completeTask",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Executions correctly retrieved\", () => {",
							"    pm.response.to.have.status(200);",
							"    ",
							"    var task = pm.response.json();",
							"",
							"    pm.expect(task).to.not.be.null;",
							"",
							"    pm.expect(task).to.have.property('id');",
							"    pm.expect(task.id).to.not.be.null;",
							"    pm.expect(task.id).to.equal(pm.collectionVariables.get('subTaskId'));",
							"",
							"    pm.expect(task).to.have.property('taskStatus');",
							"    pm.expect(task.taskStatus).to.not.be.null;",
							"    pm.expect(task.taskStatus).to.equal(1);",
							"    ",
							"    pm.expect(task).to.have.property('claimedByUserId');",
							"    pm.expect(task.claimedByUserId).to.not.be.null;",
							"    pm.expect(task.claimedByUserId).to.equal(pm.environment.get('userId'));",
							"",
							"    pm.expect(task).to.have.property('concludedByUserId');",
							"    pm.expect(task.concludedByUserId).to.not.be.null;",
							"    pm.expect(task.concludedByUserId).to.equal(pm.environment.get('userId'));",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/task/complete?taskId={{subTaskId}}&userId={{userId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"task",
						"complete"
					],
					"query": [
						{
							"key": "taskId",
							"value": "{{subTaskId}}"
						},
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "interruptTask",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Executions correctly retrieved\", () => {",
							"    pm.response.to.have.status(200);",
							"    ",
							"    var task = pm.response.json();",
							"",
							"    pm.expect(task).to.not.be.null;",
							"",
							"    pm.expect(task).to.have.property('id');",
							"    pm.expect(task.id).to.not.be.null;",
							"    pm.expect(task.id).to.equal(pm.collectionVariables.get('subTaskId2'));",
							"",
							"    pm.expect(task).to.have.property('taskStatus');",
							"    pm.expect(task.taskStatus).to.not.be.null;",
							"    pm.expect(task.taskStatus).to.equal(2);",
							"",
							"    pm.expect(task).to.have.property('concludedByUserId');",
							"    pm.expect(task.concludedByUserId).to.not.be.null;",
							"    pm.expect(task.concludedByUserId).to.equal(pm.environment.get('userId'));",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/task/interrupt?taskId={{subTaskId2}}&userId={{userId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"task",
						"interrupt"
					],
					"query": [
						{
							"key": "taskId",
							"value": "{{subTaskId2}}"
						},
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "terminateTask",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Executions correctly retrieved\", () => {",
							"    pm.response.to.have.status(200);",
							"    ",
							"    var task = pm.response.json();",
							"",
							"    pm.expect(task).to.not.be.null;",
							"",
							"    pm.expect(task).to.have.property('id');",
							"    pm.expect(task.id).to.not.be.null;",
							"    pm.expect(task.id).to.equal(pm.collectionVariables.get('subTaskId3'));",
							"",
							"    pm.expect(task).to.have.property('taskStatus');",
							"    pm.expect(task.taskStatus).to.not.be.null;",
							"    pm.expect(task.taskStatus).to.equal(4);",
							"",
							"    pm.expect(task).to.have.property('concludedByUserId');",
							"    pm.expect(task.concludedByUserId).to.not.be.null;",
							"    pm.expect(task.concludedByUserId).to.equal(pm.environment.get('userId'));",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/task/terminate?taskId={{subTaskId3}}&userId={{userId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"task",
						"terminate"
					],
					"query": [
						{
							"key": "taskId",
							"value": "{{subTaskId3}}"
						},
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwt}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"setTimeout(function() {}, 2000);"
				]
			}
		}
	],
	"variable": [
		{
			"key": "subTaskId",
			"value": "0"
		},
		{
			"key": "subtaskId",
			"value": ""
		},
		{
			"key": "isProcessCreationRequest",
			"value": ""
		},
		{
			"key": "runningNames",
			"value": ""
		},
		{
			"key": "completedNames",
			"value": ""
		},
		{
			"key": "interruptedNames",
			"value": ""
		},
		{
			"key": "skippedNames",
			"value": ""
		},
		{
			"key": "terminatedNames",
			"value": ""
		},
		{
			"key": "taskId_Test",
			"value": ""
		},
		{
			"key": "taskId_1: Empty",
			"value": ""
		},
		{
			"key": "subTaskId2",
			"value": ""
		},
		{
			"key": "subTaskId3",
			"value": ""
		}
	]
}