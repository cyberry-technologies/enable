{
	"info": {
		"_postman_id": "67d78bee-ebad-429b-9ca8-15d94c6f91f1",
		"name": "EPIC02_ProcessExecution",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17538466"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Sign in success\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    pm.environment.set('jwt', pm.response.json().token);\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"{{userEmail}}\",\n    \"passwordEncrypted\": \"{{userPassword}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/auth/login",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "getCurrentUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Correct profile\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    var responseBody = pm.response.json();\r",
							"\r",
							"    pm.environment.set('userId', responseBody.id);\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/auth/get",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"auth",
						"get"
					]
				}
			},
			"response": []
		},
		{
			"name": "createProcessPublishment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ProcessPublishment correctly added\", () => {",
							"    pm.response.to.have.status(204);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Test process publishment\",\n    \"description\": \"This process is published publicly for testing purposes. By paying the 100.00 euros once you will be able to use this process and all it's (upcoming) versions forever.\",\n    \"visibility\": 1,\n    \"price\": 100.00,\n    \"pricingType\": 1,\n    \"firstVersion\": {\n        \"name\": \"Initial\",\n        \"changeNotes\": \"Initial version\",\n        \"mainProcessId\": 0,\n        \"processes\": [\n            {\n                \"id\": 0,\n                \"parentProcessId\": null,\n                \"tpositionYpe\": \"0\",\n                \"name\": \"Test\",\n                \"description\": \"##1: EmptpositionY## \\nTests the most basic process: one without child processes. It should just be there as the lowest task for a user to complete. AdditionallpositionY, because it's the first process of the processFile, it should be created when the epositionXecution is first created/ run.\\n\\nOn: Creation of EpositionXecution\\n-> Running:     Test + 1\\n\\nOn: Completion of <1: EmptpositionY>\\n-> Completed:   1\\n-> Running:     2 + 2.1\\n\\n\\n##2: Merge at end##\\nTests the scenario where 2 connections lead into the end of the parent process. The logic should be: if the end is reached bpositionY just 1 connection from a complete process. The parent process is done, as in using a 'return' in code, and all 'Running' processes below are either 'Completed' for the one that reached it first and 'Skipped' for the others that did not.\\n\\nOn: Completion of 2.1\\n-> Completed:   2.1\\n-> Running:     2 + 2.2 + 2.3\\n\\nOn: Completion of 2.2\\n-> Completed:   2.1 + 2.2 + 2\\n-> Skipped:     2.3\\n-> Running:     3 + 3.1 + 3.2\\n\\n\\n##3: Split at Start##\\nTests if the correct things happen when a process immediatelpositionY splits at the start and after when thepositionY merge into 1 process again. The logic should be: 1 - When multiple connections come out of a newlpositionY completed process, all create a new task with the destination process. 2 - When multiple connections lead into 1 non-parent process, everpositionY time an origin process is completed, a new task of the destination is added, even if it alreadpositionY epositionXists or is completed. This behaviour can be captured bpositionY using an IF beforehand that uses a boolean to checks if the task is alreadpositionY created. 3 - If one path reaches the end of the parent process, all other paths are skipped.\\n\\nOn: Completion of 3.1\\n-> Completed:   3.1 \\n-> Running:     3 + 3.2 + 3.3\\n\\nOn: Completion of 3.2\\n-> Completed:   3.1 + 3.2\\n-> Running:     3 + 3.3 + 3.3\\n\\nOn: Completion of 3.3\\n-> Completed:   2 + 3.1 + 3.2 + 3.3 + 3\\n-> Skipped:     3.3\\n-> Running:     4 + 4.1\\n\\n\\n##4: Loop and if##\\nThis tests the loop and IF functionalitpositionY. IF is an epositionXternal process that interrupts if the condition is not met, and completes if the condition is met. The logic should constantlpositionY create and complete 4.1 and 4.2, and 4.3 everpositionY time after 4.1 until the IF condition is met and the parent is completed.\\n\\nOn: Completion of 4.1\\n-> Completed:   4.1\\n-> Running:     4.2 + 4.3\\n\\nOn: Completion of 4.2\\n-> Completed:   4.1 + 4.2\\n-> Running:     4.1 + 4.3 + 4.4\\n\\nOn: Completion of 4.3\\n-> Completed:   4.1 + 4.2 + 4.3\\n-> Running:     4.1 + 4.4\\n\\nOn: Interruption of 4.4\\n-> Completed:   4.1 + 4.2 + 4.3\\n-> Interrupted: 4.4\\n-> Running:     4.1\\n\\nOn: Completion of 4.1\\n-> Completed:   4.1 + 4.2 + 4.3 + 4.1\\n-> Interrupted: 4.4\\n-> Running:     4.2 + 4.3\\n\\nOn: Completion of 4.2\\n-> Completed:   3 + 4.1 + 4.2 + 4.3 + 4.1 + 4.2\\n-> Interrupted: 4.4\\n-> Running:     4.3 + 4.4\\n\\nOn: Completion of 4.4\\n-> Completed:   4.1 + 4.2 + 4.3 + 4.1 + 4.2 + 4.4 + 4 \\n-> Interrupted: 4.4\\n-> Skipped:     4.3\\n-> Running:     5 + 5.1 + 5.2 + 5.3\\n\\n\\n##5: Conclude child tasks##\\nThis is about testing the child conclusion functions. The logic should be: When the parent is concluded with 'Interrupted', all the running child tasks should be concluded with 'Interrupted'. When the parent is concluded with 'Completed', all the running child tasks should be concluded with 'Skipped'. This should also happen when the completion leads to the completion of a parent task, in this case the \\\"sibling\\\" tasks should be concluded with 'Skipped' as well.\\n\\nOn: Interruption of 5.1\\n-> Interrupted: 5.1 + 5.1.1\\n-> Running:     5.2 + 5.2.1 + 5.3 + 5.3.1\\n\\nOn: Completion of 5.2\\n-> Interrupted: 5.1 + 5.1.1\\n-> Completed:   5.2 + 5.2.1 + 5\\n-> Skipped:     5.3 + 5.3.1\\n-> Running:     6\\n\\n\\n##6: EpositionXecution completed##\\nThis is the final test. When the process is finished, the test process should be finished. It should then show that the epositionXecution is also finished and not running anpositionYmore. It should still be possible to see the specific tasks and their statuses and results.\\n\\nOn: Completion of <6: EpositionXecution completed>\\n-> Completed:   6 + Test + whole epositionXecution\\n-> Interrupted: No new\\n-> Skipped:     No new\\n-> Terminated:  None\\n-> Running:     None\"\n            },\n            {\n                \"id\": 1,\n                \"parentProcessId\": 0,\n                \"tpositionYpe\": 0,\n                \"name\": \"1: EmptpositionY\",\n                \"positionX\": 32.258365613478325,\n                \"positionY\": 13.939393939393941,\n                \"description\": \"##1: EmptpositionY## \\nTests the most basic process: one without child processes. It should just be there as the lowest task for a user to complete. AdditionallpositionY, because it's the first process of the processFile, it should be created when the epositionXecution is first created/ run.\\n\\nOn: Creation of EpositionXecution\\n-> Running:     Test + 1\\n\\nOn: Completion of <1: EmptpositionY>\\n-> Completed:   1\\n-> Running:     Test + 2 + 2.1\"\n            },\n            {\n                \"id\": 2,\n                \"parentProcessId\": 0,\n                \"tpositionYpe\": 0,\n                \"name\": \"2: Merge at end\",\n                \"positionX\": 30.4662341905073,\n                \"positionY\": 26.060606060606062,\n                \"description\": \"##2: Merge at end##\\nTests the scenario where 2 connections lead into the end of the parent process. The logic should be: if the end is reached bpositionY just 1 connection from a complete process. The parent process is done, as in using a 'return' in code, and all 'Running' processes below are either 'Completed' for the one that reached it first and 'Skipped' for the others that did not.\\n\\nOn: Completion of 2.1\\n-> Completed:   2.1\\n-> Running:     Test + 2 + 2.2 + 2.3\\n\\nOn: Completion of 2.2\\n-> Completed:   2.1 + 2.2 + 2\\n-> Skipped:     2.3\\n-> Running:     Test + 3 + 3.1 + 3.2\"\n            },\n            {\n                \"id\": 3,\n                \"parentProcessId\": 0,\n                \"tpositionYpe\": \"0\",\n                \"name\": \"3: Split at start\",\n                \"positionX\": 29.86885704951697,\n                \"positionY\": 33.73737373737374,\n                \"description\": \"##3: Split at Start##\\nTests if the correct things happen when a process immediatelpositionY splits at the start and after when thepositionY merge into 1 process again. The logic should be: 1 - When multiple connections come out of a newlpositionY completed process, all create a new task with the destination process. 2 - When multiple connections lead into 1 non-parent process, everpositionY time an origin process is completed, a new task of the destination is added, even if it alreadpositionY epositionXists or is completed. This behaviour can be captured bpositionY using an IF beforehand that uses a boolean to checks if the task is alreadpositionY created. 3 - If one path reaches the end of the parent process, all other paths are skipped.\\n\\nOn: Completion of 3.1\\n-> Completed:   3.1 \\n-> Running:     Test + 3 + 3.2 + 3.3\\n\\nOn: Completion of 3.2\\n-> Completed:   3.1 + 3.2\\n-> Running:     Test + 3 + 3.3 + 3.3\\n\\nOn: Completion of 3.3\\n-> Completed:   2 + 3.1 + 3.2 + 3.3 + 3\\n-> Skipped:     3.3\\n-> Running:     4 + 4.1\"\n            },\n            {\n                \"id\": 4,\n                \"parentProcessId\": 2,\n                \"tpositionYpe\": 0,\n                \"name\": \"2.1\",\n                \"positionX\": 15.979838521491576,\n                \"positionY\": 49.898989898989896\n            },\n            {\n                \"id\": 5,\n                \"parentProcessId\": 2,\n                \"tpositionYpe\": 0,\n                \"name\": \"2.2\",\n                \"positionX\": 54.82491923114578,\n                \"positionY\": 36.4551863041289\n            },\n            {\n                \"id\": 6,\n                \"parentProcessId\": 2,\n                \"tpositionYpe\": 0,\n                \"name\": \"2.3\",\n                \"positionX\": 52.77777777777778,\n                \"positionY\": 66.54366543665436\n            },\n            {\n                \"id\": 7,\n                \"parentProcessId\": 0,\n                \"tpositionYpe\": 0,\n                \"name\": \"4: Loop and If\",\n                \"positionX\": 30.018201334764548,\n                \"positionY\": 41.91919191919192,\n                \"description\": \"This tests the loop and IF functionalitpositionY. IF is an epositionXternal process that interrupts if the condition is not met, and completes if the condition is met. The logic should constantlpositionY create and complete 4.1 and 4.2, and 4.3 everpositionY time after 4.1 until the IF condition is met and the parent is completed.\\n\\nOn: Completion of 4.1\\n-> Completed:   4.1\\n-> Running:     4.2 + 4.3\\n\\nOn: Completion of 4.2\\n-> Completed:   4.1 + 4.2\\n-> Running:     4.1 + 4.3 + 4.4\\n\\nOn: Completion of 4.3\\n-> Completed:   4.1 + 4.2 + 4.3\\n-> Running:     4.1 + 4.4\\n\\nOn: Interruption of 4.4\\n-> Completed:   4.1 + 4.2 + 4.3\\n-> Interrupted: 4.4\\n-> Running:     4.1\\n\\nOn: Completion of 4.1\\n-> Completed:   4.1 + 4.2 + 4.3 + 4.1\\n-> Interrupted: 4.4\\n-> Running:     4.2 + 4.3\\n\\nOn: Completion of 4.2\\n-> Completed:   3 + 4.1 + 4.2 + 4.3 + 4.1 + 4.2\\n-> Interrupted: 4.4\\n-> Running:     4.3 + 4.4\\n\\nOn: Completion of 4.4\\n-> Completed:   4.1 + 4.2 + 4.3 + 4.1 + 4.2 + 4.4 + 4 \\n-> Interrupted: 4.4\\n-> Skipped:     4.3\\n-> Running:     5 + 5.1 + 5.2 + 5.3\"\n            },\n            {\n                \"id\": 8,\n                \"parentProcessId\": 3,\n                \"tpositionYpe\": 0,\n                \"name\": \"3.1\",\n                \"positionX\": 28.125,\n                \"positionY\": 31.61131611316113\n            },\n            {\n                \"id\": 9,\n                \"parentProcessId\": 3,\n                \"tpositionYpe\": 0,\n                \"name\": \"3.2\",\n                \"positionX\": 27.430555555555557,\n                \"positionY\": 62.48462484624846\n            },\n            {\n                \"id\": 10,\n                \"parentProcessId\": 3,\n                \"tpositionYpe\": 0,\n                \"name\": \"3.3\",\n                \"positionX\": 60.06944444444444,\n                \"positionY\": 50.307503075030745\n            },\n            {\n                \"id\": 11,\n                \"parentProcessId\": 7,\n                \"tpositionYpe\": 0,\n                \"name\": \"4.1\",\n                \"positionX\": 27.69097222222222,\n                \"positionY\": 63.59163591635917\n            },\n            {\n                \"id\": 12,\n                \"parentProcessId\": 7,\n                \"tpositionYpe\": 0,\n                \"name\": \"4.2\",\n                \"positionX\": 30.03472222222222,\n                \"positionY\": 36.162361623616235\n            },\n            {\n                \"id\": 13,\n                \"parentProcessId\": 7,\n                \"tpositionYpe\": 0,\n                \"name\": \"4.3\",\n                \"positionX\": 61.28472222222222,\n                \"positionY\": 64.57564575645756\n            },\n            {\n                \"id\": 14,\n                \"parentProcessId\": 7,\n                \"tpositionYpe\": \"2\",\n                \"name\": \"4.4 IF\",\n                \"positionX\": 55.729166666666664,\n                \"positionY\": 37.63837638376384\n            },\n            {\n                \"id\": 16,\n                \"parentProcessId\": 0,\n                \"tpositionYpe\": \"0\",\n                \"name\": \"5: Conclude child tasks\",\n                \"positionX\": 28.898119195407663,\n                \"positionY\": 51.010101010101,\n                \"description\": \"##5: Conclude child tasks##\\nThis is about testing the child conclusion functions. The logic should be: When the parent is concluded with 'Interrupted', all the running child tasks should be concluded with 'Interrupted'. When the parent is concluded with 'Completed', all the running child tasks should be concluded with 'Skipped'. This should also happen when the completion leads to the completion of a parent task, in this case the \\\"sibling\\\" tasks should be concluded with 'Skipped' as well. \\n\\nOn: Interruption of 5.1\\n-> Interrupted: 5.1 + 5.1.1\\n-> Running:     5.2 + 5.2.1 + 5.3 + 5.3.1\\n\\nOn: Completion of 5.2\\n-> Interrupted: 5.1 + 5.1.1\\n-> Completed:   5.2 + 5.2.1 + 5\\n-> Skipped:     5.3 + 5.3.1\\n-> Running:     6\"\n            },\n            {\n                \"id\": 17,\n                \"parentProcessId\": 16,\n                \"tpositionYpe\": 0,\n                \"name\": \"5.1\",\n                \"positionX\": 39.576235590609976,\n                \"positionY\": 29.19191919191919\n            },\n            {\n                \"id\": 18,\n                \"parentProcessId\": 16,\n                \"tpositionYpe\": 0,\n                \"name\": \"5.2\",\n                \"positionX\": 37.18672702664862,\n                \"positionY\": 54.64646464646464\n            },\n            {\n                \"id\": 19,\n                \"parentProcessId\": 16,\n                \"tpositionYpe\": 0,\n                \"name\": \"5.3\",\n                \"positionX\": 36.664022028282076,\n                \"positionY\": 76.26262626262627\n            },\n            {\n                \"id\": 20,\n                \"parentProcessId\": 0,\n                \"tpositionYpe\": 0,\n                \"name\": \"6. TpositionYpes\",\n                \"positionX\": 29.271479908526626,\n                \"positionY\": 59.3939393939394\n            },\n            {\n                \"id\": 21,\n                \"parentProcessId\": 17,\n                \"tpositionYpe\": 0,\n                \"name\": \"5.1.1\",\n                \"positionX\": 39.426891305362396,\n                \"positionY\": 50.303030303030305\n            },\n            {\n                \"id\": 22,\n                \"parentProcessId\": 18,\n                \"tpositionYpe\": 0,\n                \"name\": \"5.2.1\",\n                \"positionX\": 46.67008913987026,\n                \"positionY\": 48.38383838383839\n            },\n            {\n                \"id\": 23,\n                \"parentProcessId\": 19,\n                \"tpositionYpe\": 0,\n                \"name\": \"5.3.1\",\n                \"positionX\": 44.57926914640407,\n                \"positionY\": 46.464646464646464\n            },\n            {\n                \"id\": 24,\n                \"parentProcessId\": 0,\n                \"tpositionYpe\": 0,\n                \"name\": \"Last: EpositionXecution Completed\",\n                \"positionX\": 73.02935548606898,\n                \"positionY\": 49.292929292929294,\n                \"description\": \"##Last: EpositionXecution completed##\\nThis is the final test. When the process is finished, the test process should be finished. It should then show that the epositionXecution is also finished and not running anpositionYmore. It should still be possible to see the specific tasks and their statuses and results.\\n\\nOn: Completion of <6: EpositionXecution completed>\\n-> Completed:   6 + Test + whole epositionXecution\\n-> Interrupted: No new\\n-> Skipped:     No new\\n-> Terminated:  None\\n-> Running:     None\"\n            }\n        ],\n        \"connections\": [\n            {\n                \"id\": 4,\n                \"parentProcessId\": 2,\n                \"originProcessId\": 2,\n                \"destinationProcessId\": 4,\n                \"isParentConnection\": true\n            },\n            {\n                \"id\": 5,\n                \"parentProcessId\": 2,\n                \"originProcessId\": 4,\n                \"destinationProcessId\": 5,\n                \"isParentConnection\": false\n            },\n            {\n                \"id\": 6,\n                \"parentProcessId\": 2,\n                \"originProcessId\": 4,\n                \"destinationProcessId\": 6,\n                \"isParentConnection\": false\n            },\n            {\n                \"id\": 7,\n                \"parentProcessId\": 2,\n                \"originProcessId\": 6,\n                \"destinationProcessId\": 2,\n                \"isParentConnection\": true\n            },\n            {\n                \"id\": 8,\n                \"parentProcessId\": 2,\n                \"originProcessId\": 5,\n                \"destinationProcessId\": 2,\n                \"isParentConnection\": true\n            },\n            {\n                \"id\": 9,\n                \"parentProcessId\": 3,\n                \"originProcessId\": 3,\n                \"destinationProcessId\": 8,\n                \"isParentConnection\": true\n            },\n            {\n                \"id\": 10,\n                \"parentProcessId\": 3,\n                \"originProcessId\": 3,\n                \"destinationProcessId\": 9,\n                \"isParentConnection\": true\n            },\n            {\n                \"id\": 11,\n                \"parentProcessId\": 3,\n                \"originProcessId\": 8,\n                \"destinationProcessId\": 10,\n                \"isParentConnection\": false\n            },\n            {\n                \"id\": 12,\n                \"parentProcessId\": 3,\n                \"originProcessId\": 9,\n                \"destinationProcessId\": 10,\n                \"isParentConnection\": false\n            },\n            {\n                \"id\": 13,\n                \"parentProcessId\": 3,\n                \"originProcessId\": 10,\n                \"destinationProcessId\": 3,\n                \"isParentConnection\": true\n            },\n            {\n                \"id\": 15,\n                \"parentProcessId\": 7,\n                \"originProcessId\": 11,\n                \"destinationProcessId\": 13,\n                \"isParentConnection\": false\n            },\n            {\n                \"id\": 16,\n                \"parentProcessId\": 7,\n                \"originProcessId\": 11,\n                \"destinationProcessId\": 12,\n                \"isParentConnection\": false\n            },\n            {\n                \"id\": 17,\n                \"parentProcessId\": 7,\n                \"originProcessId\": 12,\n                \"destinationProcessId\": 11,\n                \"isParentConnection\": false\n            },\n            {\n                \"id\": 18,\n                \"parentProcessId\": 7,\n                \"originProcessId\": 7,\n                \"destinationProcessId\": 11,\n                \"isParentConnection\": true\n            },\n            {\n                \"id\": 19,\n                \"parentProcessId\": 7,\n                \"originProcessId\": 14,\n                \"destinationProcessId\": 7,\n                \"isParentConnection\": true\n            },\n            {\n                \"id\": 20,\n                \"parentProcessId\": 7,\n                \"originProcessId\": 12,\n                \"destinationProcessId\": 14,\n                \"isParentConnection\": false\n            },\n            {\n                \"id\": 22,\n                \"parentProcessId\": 16,\n                \"originProcessId\": 16,\n                \"destinationProcessId\": 17,\n                \"isParentConnection\": true\n            },\n            {\n                \"id\": 23,\n                \"parentProcessId\": 16,\n                \"originProcessId\": 16,\n                \"destinationProcessId\": 18,\n                \"isParentConnection\": true\n            },\n            {\n                \"id\": 24,\n                \"parentProcessId\": 16,\n                \"originProcessId\": 16,\n                \"destinationProcessId\": 19,\n                \"isParentConnection\": true\n            },\n            {\n                \"id\": 25,\n                \"parentProcessId\": 16,\n                \"originProcessId\": 17,\n                \"destinationProcessId\": 16,\n                \"isParentConnection\": true\n            },\n            {\n                \"id\": 26,\n                \"parentProcessId\": 16,\n                \"originProcessId\": 18,\n                \"destinationProcessId\": 16,\n                \"isParentConnection\": true\n            },\n            {\n                \"id\": 27,\n                \"parentProcessId\": 16,\n                \"originProcessId\": 19,\n                \"destinationProcessId\": 16,\n                \"isParentConnection\": true\n            },\n            {\n                \"id\": 31,\n                \"parentProcessId\": 17,\n                \"originProcessId\": 21,\n                \"destinationProcessId\": 17,\n                \"isParentConnection\": true\n            },\n            {\n                \"id\": 32,\n                \"parentProcessId\": 17,\n                \"originProcessId\": 17,\n                \"destinationProcessId\": 21,\n                \"isParentConnection\": true\n            },\n            {\n                \"id\": 33,\n                \"parentProcessId\": 18,\n                \"originProcessId\": 22,\n                \"destinationProcessId\": 18,\n                \"isParentConnection\": true\n            },\n            {\n                \"id\": 34,\n                \"parentProcessId\": 18,\n                \"originProcessId\": 18,\n                \"destinationProcessId\": 22,\n                \"isParentConnection\": true\n            },\n            {\n                \"id\": 35,\n                \"parentProcessId\": 19,\n                \"originProcessId\": 23,\n                \"destinationProcessId\": 19,\n                \"isParentConnection\": true\n            },\n            {\n                \"id\": 36,\n                \"parentProcessId\": 19,\n                \"originProcessId\": 19,\n                \"destinationProcessId\": 23,\n                \"isParentConnection\": true\n            },\n            {\n                \"id\": 37,\n                \"parentProcessId\": 0,\n                \"originProcessId\": 0,\n                \"destinationProcessId\": 1,\n                \"isParentConnection\": true\n            },\n            {\n                \"id\": 38,\n                \"parentProcessId\": 0,\n                \"originProcessId\": 0,\n                \"destinationProcessId\": 2,\n                \"isParentConnection\": true\n            },\n            {\n                \"id\": 39,\n                \"parentProcessId\": 0,\n                \"originProcessId\": 0,\n                \"destinationProcessId\": 3,\n                \"isParentConnection\": true\n            },\n            {\n                \"id\": 40,\n                \"parentProcessId\": 0,\n                \"originProcessId\": 0,\n                \"destinationProcessId\": 7,\n                \"isParentConnection\": true\n            },\n            {\n                \"id\": 41,\n                \"parentProcessId\": 0,\n                \"originProcessId\": 0,\n                \"destinationProcessId\": 16,\n                \"isParentConnection\": true\n            },\n            {\n                \"id\": 43,\n                \"parentProcessId\": 0,\n                \"originProcessId\": 0,\n                \"destinationProcessId\": 20,\n                \"isParentConnection\": true\n            },\n            {\n                \"id\": 44,\n                \"parentProcessId\": 0,\n                \"originProcessId\": 1,\n                \"destinationProcessId\": 24,\n                \"isParentConnection\": false\n            },\n            {\n                \"id\": 45,\n                \"parentProcessId\": 0,\n                \"originProcessId\": 2,\n                \"destinationProcessId\": 24,\n                \"isParentConnection\": false\n            },\n            {\n                \"id\": 46,\n                \"parentProcessId\": 0,\n                \"originProcessId\": 3,\n                \"destinationProcessId\": 24,\n                \"isParentConnection\": false\n            },\n            {\n                \"id\": 47,\n                \"parentProcessId\": 0,\n                \"originProcessId\": 7,\n                \"destinationProcessId\": 24,\n                \"isParentConnection\": false\n            },\n            {\n                \"id\": 48,\n                \"parentProcessId\": 0,\n                \"originProcessId\": 16,\n                \"destinationProcessId\": 24,\n                \"isParentConnection\": false\n            },\n            {\n                \"id\": 50,\n                \"parentProcessId\": 0,\n                \"originProcessId\": 20,\n                \"destinationProcessId\": 24,\n                \"isParentConnection\": false\n            },\n            {\n                \"id\": 51,\n                \"parentProcessId\": 0,\n                \"originProcessId\": 24,\n                \"destinationProcessId\": 0,\n                \"isParentConnection\": true\n            }\n        ]\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/processPublishment/create?userId={{userId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"processPublishment",
						"create"
					],
					"query": [
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getProcessPublishmentsOfUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ProcessPublishment list correctly retrieved\", () => {",
							"    pm.response.to.have.status(200);",
							"    // Set processPublishment id in environment variable",
							"    pm.environment.set('processPublishmentId', pm.response.json()[0].id);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/processPublishment/get/userId?userId={{userId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"processPublishment",
						"get",
						"userId"
					],
					"query": [
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getProcessPublishmentVersionsOfProcessPublishment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ProcessPublishment list correctly retrieved\", () => {",
							"    pm.response.to.have.status(200);",
							"    // Set processPublishment id in environment variable",
							"    pm.environment.set('processPublishmentVersionId', pm.response.json()[0].id);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/processPublishmentVersion/get/processPublishmentId?processPublishmentId={{processPublishmentId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"processPublishmentVersion",
						"get",
						"processPublishmentId"
					],
					"query": [
						{
							"key": "processPublishmentId",
							"value": "{{processPublishmentId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "executeProcessPublishmentVersion",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ProcessPublishmentVersion correctly added\", () => {",
							"    pm.response.to.have.status(204);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/processPublishmentVersion/execute?processPublishmentVersionId={{processPublishmentVersionId}}&userId={{userId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"processPublishmentVersion",
						"execute"
					],
					"query": [
						{
							"key": "processPublishmentVersionId",
							"value": "{{processPublishmentVersionId}}"
						},
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getExecutionsOfUser - check after",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Empty execution list correctly retrieved\", () => {",
							"    pm.response.to.have.status(200);",
							"    ",
							"    var responseBody = pm.response.json()[0];",
							"",
							"    // Assert if id exists and is not null",
							"    pm.expect(responseBody).to.have.property('id');",
							"    pm.expect(responseBody.id).to.not.be.null;",
							"    ",
							"    // Assert if processPublishmentVersionId exists and is not null",
							"    pm.expect(responseBody).to.have.property('processPublishmentVersionId');",
							"    pm.expect(responseBody.processPublishmentVersionId).to.not.be.null;",
							"    ",
							"    // Assert if mainTaskId exists and is not null",
							"    pm.expect(responseBody).to.have.property('mainTaskId');",
							"    pm.expect(responseBody.mainTaskId).to.not.be.null;",
							"",
							"    // Assert if mainTask exists and id is mainTaskId",
							"    pm.expect(responseBody).to.have.property('mainTask');",
							"    pm.expect(responseBody.mainTask.id).to.equal(responseBody.mainTaskId);",
							"",
							"    // Assert if mainTask.executionId exists and is saved executionId",
							"    pm.expect(responseBody.mainTask).to.have.property('executionId');",
							"    pm.expect(responseBody.mainTask.executionId).to.equal(responseBody.id);",
							"",
							"",
							"    // Set execution id in environment variable",
							"    pm.environment.set('executionId', responseBody.id);",
							"    // Set execution id in environment variable",
							"    pm.environment.set('processPublishmentVersionId', responseBody.processPublishmentVersionId);",
							"    // Set main task id as mainTaskId in environment variable",
							"    pm.environment.set('mainTaskId', responseBody.mainTaskId);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/execution/get/userId?userId={{userId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"execution",
						"get",
						"userId"
					],
					"query": [
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwt}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"setTimeout(function() {}, 1000);"
				]
			}
		}
	],
	"variable": [
		{
			"key": "isProcessCreationRequest",
			"value": ""
		},
		{
			"key": "runningNames",
			"value": ""
		},
		{
			"key": "completedNames",
			"value": ""
		},
		{
			"key": "interruptedNames",
			"value": ""
		},
		{
			"key": "skippedNames",
			"value": ""
		},
		{
			"key": "terminatedNames",
			"value": ""
		},
		{
			"key": "taskId_Test",
			"value": ""
		},
		{
			"key": "taskId_1: Empty",
			"value": ""
		}
	]
}