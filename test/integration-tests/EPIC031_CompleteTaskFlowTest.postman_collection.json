{
	"info": {
		"_postman_id": "18032e30-b772-4e57-b536-725be9b9ea79",
		"name": "EPIC031_CompleteTaskFlowTest",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17538466"
	},
	"item": [
		{
			"name": "executeProcessPublishmentVersion",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ProcessPublishmentVersion correctly added\", () => {",
							"    pm.response.to.have.status(204);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set('excludeFromTaskCheckTest', true);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/processPublishmentVersion/execute?processPublishmentVersionId={{processPublishmentVersionId}}&userId={{userId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"processPublishmentVersion",
						"execute"
					],
					"query": [
						{
							"key": "processPublishmentVersionId",
							"value": "{{processPublishmentVersionId}}"
						},
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getExecutionsOfUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.collectionVariables.set('excludeFromTaskCheckTest', false);",
							"",
							"pm.test(\"Empty execution list correctly retrieved\", () => {",
							"    pm.response.to.have.status(200);",
							"    ",
							"    var responseBody = pm.response.json()[0];",
							"",
							"    // Assert if id exists and is not null",
							"    pm.expect(responseBody).to.have.property('id');",
							"    pm.expect(responseBody.id).to.not.be.null;",
							"    ",
							"    // Assert if processFileId exists and is not null",
							"    pm.expect(responseBody).to.have.property('processFileId');",
							"    pm.expect(responseBody.processFileId).to.not.be.null;",
							"    ",
							"    // Assert if mainTaskId exists and is not null",
							"    pm.expect(responseBody).to.have.property('mainTaskId');",
							"    pm.expect(responseBody.mainTaskId).to.not.be.null;",
							"",
							"    // Assert if mainTask exists and id is mainTaskId",
							"    pm.expect(responseBody).to.have.property('mainTask');",
							"    pm.expect(responseBody.mainTask.id).to.equal(responseBody.mainTaskId);",
							"",
							"    // Assert if mainTask.executionId exists and is saved executionId",
							"    pm.expect(responseBody.mainTask).to.have.property('executionId');",
							"    pm.expect(responseBody.mainTask.executionId).to.equal(responseBody.id);",
							"",
							"",
							"    // Set execution id in environment variable",
							"    pm.environment.set('executionId', responseBody.id);",
							"    // Set execution id in environment variable",
							"    pm.environment.set('processFileId', responseBody.processFileId);",
							"    // Set main task id as mainTaskId in environment variable",
							"    pm.environment.set('mainTaskId', responseBody.mainTaskId);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/execution/get/userId?userId={{userId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"execution",
						"get",
						"userId"
					],
					"query": [
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getTasksOfExecution",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Executions correctly retrieved\", () => {",
							"    pm.response.to.have.status(200);",
							"    ",
							"    var responseBody = pm.response.json();",
							"",
							"    var task1 = responseBody[0];",
							"    var task2 = responseBody[1];",
							"",
							"    pm.expect(task1).to.have.property('id');",
							"    pm.expect(task1.id).to.not.be.null;",
							"    ",
							"    pm.expect(task1).to.have.property('executionId');",
							"    pm.expect(task1.executionId).to.not.be.null;",
							"    pm.expect(task1.executionId).to.equal(pm.environment.get('executionId'));",
							"    ",
							"    pm.expect(task1).to.have.property('processFileId');",
							"    pm.expect(task1.processFileId).to.not.be.null;",
							"",
							"    pm.expect(task1).to.have.property('processInfoId');",
							"    pm.expect(task1.processInfoId).to.not.be.null;",
							"",
							"    pm.expect(task1).to.have.property('parentTaskId');",
							"    pm.expect(task1.parentTaskId).to.be.null;",
							"",
							"    pm.expect(task1).to.have.property('taskStatus');",
							"    pm.expect(task1.taskStatus).to.not.be.null;",
							"    pm.expect(task1.taskStatus).to.equal(0);",
							"    ",
							"    pm.expect(task1).to.have.property('processInfo');",
							"    pm.expect(task1.processInfo).to.not.be.null;",
							"    pm.expect(task1.processInfo).to.have.property('name');",
							"    pm.expect(task1.processInfo.name).to.not.be.null;",
							"    pm.expect(task1.processInfo.name).to.equal('Test');",
							"",
							"",
							"    pm.expect(task2).to.have.property('id');",
							"    pm.expect(task2.id).to.not.be.null;",
							"    ",
							"    pm.expect(task2).to.have.property('executionId');",
							"    pm.expect(task2.executionId).to.not.be.null;",
							"    pm.expect(task2.executionId).to.equal(pm.environment.get('executionId'));",
							"    ",
							"    pm.expect(task2).to.have.property('processFileId');",
							"    pm.expect(task2.processFileId).to.not.be.null;",
							"",
							"    pm.expect(task2).to.have.property('processInfoId');",
							"    pm.expect(task2.processInfoId).to.not.be.null;",
							"",
							"    pm.expect(task2).to.have.property('parentTaskId');",
							"    pm.expect(task2.parentTaskId).to.not.be.null;",
							"",
							"    pm.expect(task2).to.have.property('taskStatus');",
							"    pm.expect(task2.taskStatus).to.not.be.null;",
							"    pm.expect(task2.taskStatus).to.equal(0);",
							"    ",
							"    pm.expect(task2).to.have.property('processInfo');",
							"    pm.expect(task2.processInfo).to.not.be.null;",
							"    pm.expect(task2.processInfo).to.have.property('name');",
							"    pm.expect(task2.processInfo.name).to.not.be.null;",
							"    pm.expect(task2.processInfo.name).to.equal('1: Empty');",
							"",
							"    // Set task 1 id as mainTaskId in environment variable",
							"    pm.environment.set('mainTaskId', task1.id);",
							"    // Set task 2 id as subTaskId to collection variable",
							"    pm.collectionVariables.set('subTaskId', task2.id);",
							"    pm.collectionVariables.set('subTaskId2', responseBody[2].id);",
							"    pm.collectionVariables.set('subTaskId3', responseBody[3].id);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var pendingNames = [\r",
							"    'Test',\r",
							"    '1: Empty',\r",
							"    '2: Merge at end',\r",
							"    '2.1',\r",
							"    '3: Split at start',\r",
							"    '3.1',\r",
							"    '3.2',\r",
							"    '4: Loop and If',\r",
							"    '4.1',\r",
							"    '5: Conclude child tasks',\r",
							"    '5.1',\r",
							"    '5.1.1',\r",
							"    '5.2',\r",
							"    '5.2.1',\r",
							"    '5.3',\r",
							"    '5.3.1',\r",
							"    '6. Types',\r",
							"];\r",
							"var completedNames = [];\r",
							"var interruptedNames = [];\r",
							"var skippedNames = [];\r",
							"var terminatedNames = [];\r",
							"\r",
							"pm.collectionVariables.set('pendingNames', JSON.stringify(pendingNames));\r",
							"pm.collectionVariables.set('completedNames', JSON.stringify(completedNames));\r",
							"pm.collectionVariables.set('interruptedNames', JSON.stringify(interruptedNames));\r",
							"pm.collectionVariables.set('skippedNames', JSON.stringify(skippedNames));\r",
							"pm.collectionVariables.set('terminatedNames', JSON.stringify(terminatedNames));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/task/get/executionId?executionId={{executionId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"task",
						"get",
						"executionId"
					],
					"query": [
						{
							"key": "executionId",
							"value": "{{executionId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "complete - 1: Empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var pendingNames = [\r",
							"    'Last: Execution Completed',\r",
							"];\r",
							"var completedNames = [\r",
							"    '1: Empty',\r",
							"];\r",
							"var interruptedNames = [];\r",
							"var skippedNames = [];\r",
							"var terminatedNames = [];\r",
							"\r",
							"var nameToConclude = '1: Empty';\r",
							"\r",
							"\r",
							"var idToConclude = pm.collectionVariables.get('taskId_' + nameToConclude);\r",
							"pm.collectionVariables.set('idToConclude', idToConclude);\r",
							"pm.collectionVariables.set('pendingNames', JSON.stringify(pendingNames));\r",
							"pm.collectionVariables.set('completedNames', JSON.stringify(completedNames));\r",
							"pm.collectionVariables.set('interruptedNames', JSON.stringify(interruptedNames));\r",
							"pm.collectionVariables.set('skippedNames', JSON.stringify(skippedNames));\r",
							"pm.collectionVariables.set('terminatedNames', JSON.stringify(terminatedNames));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/task/complete?taskId={{idToConclude}}&userId={{userId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"task",
						"complete"
					],
					"query": [
						{
							"key": "taskId",
							"value": "{{idToConclude}}"
						},
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "complete - 2.1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var pendingNames = [\r",
							"    '2.2',\r",
							"    '2.3'\r",
							"];\r",
							"var completedNames = [\r",
							"    '2.1'\r",
							"];\r",
							"var interruptedNames = [];\r",
							"var skippedNames = [];\r",
							"var terminatedNames = [];\r",
							"\r",
							"var nameToConclude = '2.1';\r",
							"\r",
							"\r",
							"var idToConclude = pm.collectionVariables.get('taskId_' + nameToConclude);\r",
							"pm.collectionVariables.set('idToConclude', idToConclude);\r",
							"pm.collectionVariables.set('pendingNames', JSON.stringify(pendingNames));\r",
							"pm.collectionVariables.set('completedNames', JSON.stringify(completedNames));\r",
							"pm.collectionVariables.set('interruptedNames', JSON.stringify(interruptedNames));\r",
							"pm.collectionVariables.set('skippedNames', JSON.stringify(skippedNames));\r",
							"pm.collectionVariables.set('terminatedNames', JSON.stringify(terminatedNames));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/task/complete?taskId={{idToConclude}}&userId={{userId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"task",
						"complete"
					],
					"query": [
						{
							"key": "taskId",
							"value": "{{idToConclude}}"
						},
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "complete - 2.2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var pendingNames = [\r",
							"    'Last: Execution Completed',\r",
							"];\r",
							"var completedNames = [\r",
							"    '2: Merge at end',\r",
							"    '2.2',\r",
							"];\r",
							"var interruptedNames = [];\r",
							"var skippedNames = [\r",
							"    '2.3',\r",
							"];\r",
							"var terminatedNames = [];\r",
							"\r",
							"var nameToConclude = '2.2';\r",
							"\r",
							"\r",
							"var idToConclude = pm.collectionVariables.get('taskId_' + nameToConclude);\r",
							"pm.collectionVariables.set('idToConclude', idToConclude);\r",
							"pm.collectionVariables.set('pendingNames', JSON.stringify(pendingNames));\r",
							"pm.collectionVariables.set('completedNames', JSON.stringify(completedNames));\r",
							"pm.collectionVariables.set('interruptedNames', JSON.stringify(interruptedNames));\r",
							"pm.collectionVariables.set('skippedNames', JSON.stringify(skippedNames));\r",
							"pm.collectionVariables.set('terminatedNames', JSON.stringify(terminatedNames));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/task/complete?taskId={{idToConclude}}&userId={{userId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"task",
						"complete"
					],
					"query": [
						{
							"key": "taskId",
							"value": "{{idToConclude}}"
						},
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "complete - 3.1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var pendingNames = [\r",
							"    '3.2',\r",
							"    '3.3',\r",
							"];\r",
							"var completedNames = [\r",
							"    '3.1',\r",
							"];\r",
							"var interruptedNames = [];\r",
							"var skippedNames = [];\r",
							"var terminatedNames = [];\r",
							"\r",
							"var nameToConclude = '3.1';\r",
							"\r",
							"\r",
							"var idToConclude = pm.collectionVariables.get('taskId_' + nameToConclude);\r",
							"pm.collectionVariables.set('idToConclude', idToConclude);\r",
							"pm.collectionVariables.set('pendingNames', JSON.stringify(pendingNames));\r",
							"pm.collectionVariables.set('completedNames', JSON.stringify(completedNames));\r",
							"pm.collectionVariables.set('interruptedNames', JSON.stringify(interruptedNames));\r",
							"pm.collectionVariables.set('skippedNames', JSON.stringify(skippedNames));\r",
							"pm.collectionVariables.set('terminatedNames', JSON.stringify(terminatedNames));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/task/complete?taskId={{idToConclude}}&userId={{userId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"task",
						"complete"
					],
					"query": [
						{
							"key": "taskId",
							"value": "{{idToConclude}}"
						},
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "complete - 3.2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var pendingNames = [\r",
							"    '3.3'\r",
							"];\r",
							"var completedNames = [\r",
							"    '3.2',\r",
							"];\r",
							"var interruptedNames = [];\r",
							"var skippedNames = [];\r",
							"var terminatedNames = [];\r",
							"\r",
							"var nameToConclude = '3.2';\r",
							"\r",
							"\r",
							"\r",
							"var idToConclude = pm.collectionVariables.get('taskId_' + nameToConclude);\r",
							"pm.collectionVariables.set('idToConclude', idToConclude);\r",
							"pm.collectionVariables.set('pendingNames', JSON.stringify(pendingNames));\r",
							"pm.collectionVariables.set('completedNames', JSON.stringify(completedNames));\r",
							"pm.collectionVariables.set('interruptedNames', JSON.stringify(interruptedNames));\r",
							"pm.collectionVariables.set('skippedNames', JSON.stringify(skippedNames));\r",
							"pm.collectionVariables.set('terminatedNames', JSON.stringify(terminatedNames));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/task/complete?taskId={{idToConclude}}&userId={{userId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"task",
						"complete"
					],
					"query": [
						{
							"key": "taskId",
							"value": "{{idToConclude}}"
						},
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "complete - 3.3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var pendingNames = [\r",
							"    'Last: Execution Completed',\r",
							"];\r",
							"var completedNames = [\r",
							"    '3.3',\r",
							"    '3: Split at start',\r",
							"];\r",
							"var interruptedNames = [];\r",
							"var skippedNames = [\r",
							"    '3.3',\r",
							"];\r",
							"var terminatedNames = [];\r",
							"\r",
							"var nameToConclude = '3.3';\r",
							"\r",
							"\r",
							"\r",
							"var idToConclude = pm.collectionVariables.get('taskId_' + nameToConclude);\r",
							"pm.collectionVariables.set('idToConclude', idToConclude);\r",
							"pm.collectionVariables.set('pendingNames', JSON.stringify(pendingNames));\r",
							"pm.collectionVariables.set('completedNames', JSON.stringify(completedNames));\r",
							"pm.collectionVariables.set('interruptedNames', JSON.stringify(interruptedNames));\r",
							"pm.collectionVariables.set('skippedNames', JSON.stringify(skippedNames));\r",
							"pm.collectionVariables.set('terminatedNames', JSON.stringify(terminatedNames));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/task/complete?taskId={{idToConclude}}&userId={{userId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"task",
						"complete"
					],
					"query": [
						{
							"key": "taskId",
							"value": "{{idToConclude}}"
						},
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "complete - 4.1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var pendingNames = [\r",
							"    '4.2',\r",
							"    '4.3',\r",
							"];\r",
							"var completedNames = [\r",
							"    '4.1',\r",
							"];\r",
							"var interruptedNames = [];\r",
							"var skippedNames = [];\r",
							"var terminatedNames = [];\r",
							"\r",
							"var nameToConclude = '4.1';\r",
							"\r",
							"\r",
							"\r",
							"var idToConclude = pm.collectionVariables.get('taskId_' + nameToConclude);\r",
							"pm.collectionVariables.set('idToConclude', idToConclude);\r",
							"pm.collectionVariables.set('pendingNames', JSON.stringify(pendingNames));\r",
							"pm.collectionVariables.set('completedNames', JSON.stringify(completedNames));\r",
							"pm.collectionVariables.set('interruptedNames', JSON.stringify(interruptedNames));\r",
							"pm.collectionVariables.set('skippedNames', JSON.stringify(skippedNames));\r",
							"pm.collectionVariables.set('terminatedNames', JSON.stringify(terminatedNames));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/task/complete?taskId={{idToConclude}}&userId={{userId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"task",
						"complete"
					],
					"query": [
						{
							"key": "taskId",
							"value": "{{idToConclude}}"
						},
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "complete - 4.2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var pendingNames = [\r",
							"    '4.3',\r",
							"    '4.4 IF',\r",
							"];\r",
							"var completedNames = [\r",
							"    '4.2',\r",
							"];\r",
							"var interruptedNames = [];\r",
							"var skippedNames = [];\r",
							"var terminatedNames = [];\r",
							"\r",
							"var nameToConclude = '4.2';\r",
							"\r",
							"\r",
							"\r",
							"var idToConclude = pm.collectionVariables.get('taskId_' + nameToConclude);\r",
							"pm.collectionVariables.set('idToConclude', idToConclude);\r",
							"pm.collectionVariables.set('pendingNames', JSON.stringify(pendingNames));\r",
							"pm.collectionVariables.set('completedNames', JSON.stringify(completedNames));\r",
							"pm.collectionVariables.set('interruptedNames', JSON.stringify(interruptedNames));\r",
							"pm.collectionVariables.set('skippedNames', JSON.stringify(skippedNames));\r",
							"pm.collectionVariables.set('terminatedNames', JSON.stringify(terminatedNames));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/task/complete?taskId={{idToConclude}}&userId={{userId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"task",
						"complete"
					],
					"query": [
						{
							"key": "taskId",
							"value": "{{idToConclude}}"
						},
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "complete - 4.3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var pendingNames = [];\r",
							"var completedNames = [\r",
							"    '4.3',\r",
							"];\r",
							"var interruptedNames = [];\r",
							"var skippedNames = [];\r",
							"var terminatedNames = [];\r",
							"\r",
							"var nameToConclude = '4.3';\r",
							"\r",
							"\r",
							"\r",
							"var idToConclude = pm.collectionVariables.get('taskId_' + nameToConclude);\r",
							"pm.collectionVariables.set('idToConclude', idToConclude);\r",
							"pm.collectionVariables.set('pendingNames', JSON.stringify(pendingNames));\r",
							"pm.collectionVariables.set('completedNames', JSON.stringify(completedNames));\r",
							"pm.collectionVariables.set('interruptedNames', JSON.stringify(interruptedNames));\r",
							"pm.collectionVariables.set('skippedNames', JSON.stringify(skippedNames));\r",
							"pm.collectionVariables.set('terminatedNames', JSON.stringify(terminatedNames));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/task/complete?taskId={{idToConclude}}&userId={{userId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"task",
						"complete"
					],
					"query": [
						{
							"key": "taskId",
							"value": "{{idToConclude}}"
						},
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "interrupt - 4.4 IF",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var pendingNames = [];\r",
							"var completedNames = [];\r",
							"var interruptedNames = [\r",
							"    '4.4 IF',\r",
							"];\r",
							"var skippedNames = [];\r",
							"var terminatedNames = [];\r",
							"\r",
							"var nameToConclude = '4.4 IF';\r",
							"\r",
							"\r",
							"\r",
							"var idToConclude = pm.collectionVariables.get('taskId_' + nameToConclude);\r",
							"pm.collectionVariables.set('idToConclude', idToConclude);\r",
							"pm.collectionVariables.set('pendingNames', JSON.stringify(pendingNames));\r",
							"pm.collectionVariables.set('completedNames', JSON.stringify(completedNames));\r",
							"pm.collectionVariables.set('interruptedNames', JSON.stringify(interruptedNames));\r",
							"pm.collectionVariables.set('skippedNames', JSON.stringify(skippedNames));\r",
							"pm.collectionVariables.set('terminatedNames', JSON.stringify(terminatedNames));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/task/interrupt?taskId={{idToConclude}}&userId={{userId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"task",
						"interrupt"
					],
					"query": [
						{
							"key": "taskId",
							"value": "{{idToConclude}}"
						},
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "complete - 4.1 - take2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var pendingNames = [\r",
							"    '4.2',\r",
							"    '4.3',\r",
							"];\r",
							"var completedNames = [\r",
							"    '4.1',\r",
							"];\r",
							"var interruptedNames = [];\r",
							"var skippedNames = [];\r",
							"var terminatedNames = [];\r",
							"\r",
							"var nameToConclude = '4.1';\r",
							"\r",
							"\r",
							"\r",
							"var idToConclude = pm.collectionVariables.get('taskId_' + nameToConclude);\r",
							"pm.collectionVariables.set('idToConclude', idToConclude);\r",
							"pm.collectionVariables.set('pendingNames', JSON.stringify(pendingNames));\r",
							"pm.collectionVariables.set('completedNames', JSON.stringify(completedNames));\r",
							"pm.collectionVariables.set('interruptedNames', JSON.stringify(interruptedNames));\r",
							"pm.collectionVariables.set('skippedNames', JSON.stringify(skippedNames));\r",
							"pm.collectionVariables.set('terminatedNames', JSON.stringify(terminatedNames));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/task/complete?taskId={{idToConclude}}&userId={{userId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"task",
						"complete"
					],
					"query": [
						{
							"key": "taskId",
							"value": "{{idToConclude}}"
						},
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "complete - 4.2 - take2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var pendingNames = [\r",
							"    '4.4 IF',\r",
							"];\r",
							"var completedNames = [\r",
							"    '4.2',\r",
							"];\r",
							"var interruptedNames = [];\r",
							"var skippedNames = [];\r",
							"var terminatedNames = [];\r",
							"\r",
							"var nameToConclude = '4.2';\r",
							"\r",
							"\r",
							"\r",
							"var idToConclude = pm.collectionVariables.get('taskId_' + nameToConclude);\r",
							"pm.collectionVariables.set('idToConclude', idToConclude);\r",
							"pm.collectionVariables.set('pendingNames', JSON.stringify(pendingNames));\r",
							"pm.collectionVariables.set('completedNames', JSON.stringify(completedNames));\r",
							"pm.collectionVariables.set('interruptedNames', JSON.stringify(interruptedNames));\r",
							"pm.collectionVariables.set('skippedNames', JSON.stringify(skippedNames));\r",
							"pm.collectionVariables.set('terminatedNames', JSON.stringify(terminatedNames));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/task/complete?taskId={{idToConclude}}&userId={{userId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"task",
						"complete"
					],
					"query": [
						{
							"key": "taskId",
							"value": "{{idToConclude}}"
						},
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "complete - 4.4 IF",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var pendingNames = [];\r",
							"var completedNames = [\r",
							"    '4.4 IF',\r",
							"    '4: Loop and If',\r",
							"];\r",
							"var interruptedNames = [];\r",
							"var skippedNames = [\r",
							"    '4.3',\r",
							"];\r",
							"var terminatedNames = [];\r",
							"\r",
							"var nameToConclude = '4.4 IF';\r",
							"\r",
							"\r",
							"\r",
							"var idToConclude = pm.collectionVariables.get('taskId_' + nameToConclude);\r",
							"pm.collectionVariables.set('idToConclude', idToConclude);\r",
							"pm.collectionVariables.set('pendingNames', JSON.stringify(pendingNames));\r",
							"pm.collectionVariables.set('completedNames', JSON.stringify(completedNames));\r",
							"pm.collectionVariables.set('interruptedNames', JSON.stringify(interruptedNames));\r",
							"pm.collectionVariables.set('skippedNames', JSON.stringify(skippedNames));\r",
							"pm.collectionVariables.set('terminatedNames', JSON.stringify(terminatedNames));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/task/complete?taskId={{idToConclude}}&userId={{userId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"task",
						"complete"
					],
					"query": [
						{
							"key": "taskId",
							"value": "{{idToConclude}}"
						},
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "interrupt - 5.1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var pendingNames = [];\r",
							"var completedNames = [];\r",
							"var interruptedNames = [\r",
							"    '5.1',\r",
							"];\r",
							"var skippedNames = [\r",
							"    '5.1.1',\r",
							"];\r",
							"var terminatedNames = [];\r",
							"\r",
							"var nameToConclude = '5.1';\r",
							"\r",
							"\r",
							"\r",
							"var idToConclude = pm.collectionVariables.get('taskId_' + nameToConclude);\r",
							"pm.collectionVariables.set('idToConclude', idToConclude);\r",
							"pm.collectionVariables.set('pendingNames', JSON.stringify(pendingNames));\r",
							"pm.collectionVariables.set('completedNames', JSON.stringify(completedNames));\r",
							"pm.collectionVariables.set('interruptedNames', JSON.stringify(interruptedNames));\r",
							"pm.collectionVariables.set('skippedNames', JSON.stringify(skippedNames));\r",
							"pm.collectionVariables.set('terminatedNames', JSON.stringify(terminatedNames));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/task/interrupt?taskId={{idToConclude}}&userId={{userId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"task",
						"interrupt"
					],
					"query": [
						{
							"key": "taskId",
							"value": "{{idToConclude}}"
						},
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "complete - 5.2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var pendingNames = [];\r",
							"var completedNames = [\r",
							"    '5.2',\r",
							"    '5: Conclude child tasks',\r",
							"];\r",
							"var interruptedNames = [];\r",
							"var skippedNames = [\r",
							"    '5.2.1',\r",
							"    '5.3',\r",
							"    '5.3.1',\r",
							"];\r",
							"var terminatedNames = [];\r",
							"\r",
							"var nameToConclude = '5.2';\r",
							"\r",
							"\r",
							"\r",
							"var idToConclude = pm.collectionVariables.get('taskId_' + nameToConclude);\r",
							"pm.collectionVariables.set('idToConclude', idToConclude);\r",
							"pm.collectionVariables.set('pendingNames', JSON.stringify(pendingNames));\r",
							"pm.collectionVariables.set('completedNames', JSON.stringify(completedNames));\r",
							"pm.collectionVariables.set('interruptedNames', JSON.stringify(interruptedNames));\r",
							"pm.collectionVariables.set('skippedNames', JSON.stringify(skippedNames));\r",
							"pm.collectionVariables.set('terminatedNames', JSON.stringify(terminatedNames));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/task/complete?taskId={{idToConclude}}&userId={{userId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"task",
						"complete"
					],
					"query": [
						{
							"key": "taskId",
							"value": "{{idToConclude}}"
						},
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "complete - Last: Execution completed",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var pendingNames = [];\r",
							"var completedNames = [\r",
							"    'Test',\r",
							"    'Last: Execution Completed',\r",
							"];\r",
							"var interruptedNames = [];\r",
							"var skippedNames = [\r",
							"    'Last: Execution Completed',\r",
							"    'Last: Execution Completed',\r",
							"    'Last: Execution Completed',\r",
							"    'Last: Execution Completed',\r",
							"    'Last: Execution Completed',\r",
							"];\r",
							"var terminatedNames = [];\r",
							"\r",
							"var nameToConclude = 'Last: Execution Completed';\r",
							"\r",
							"\r",
							"\r",
							"var idToConclude = pm.collectionVariables.get('taskId_' + nameToConclude);\r",
							"pm.collectionVariables.set('idToConclude', idToConclude);\r",
							"pm.collectionVariables.set('pendingNames', JSON.stringify(pendingNames));\r",
							"pm.collectionVariables.set('completedNames', JSON.stringify(completedNames));\r",
							"pm.collectionVariables.set('interruptedNames', JSON.stringify(interruptedNames));\r",
							"pm.collectionVariables.set('skippedNames', JSON.stringify(skippedNames));\r",
							"pm.collectionVariables.set('terminatedNames', JSON.stringify(terminatedNames));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/task/complete?taskId={{idToConclude}}&userId={{userId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"task",
						"complete"
					],
					"query": [
						{
							"key": "taskId",
							"value": "{{idToConclude}}"
						},
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getTasksOfExecution Check all",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.collectionVariables.set('excludeFromTaskCheckTest', false);",
							"",
							"var pendingNames = [];",
							"var completedNames = [",
							"    '1: Empty',",
							"    '2.1',",
							"    '2.2',",
							"    '2: Merge at end',",
							"    '3.1',",
							"    '3.2',",
							"    '3.3',",
							"    '3: Split at start',",
							"    '4.1',",
							"    '4.2',",
							"    '4.3',",
							"    '4.1',",
							"    '4.2',",
							"    '4.4 IF',",
							"    '4: Loop and If',",
							"    '5.2',",
							"    '5: Conclude child tasks',",
							"    'Last: Execution Completed',",
							"    'Test',",
							"];",
							"var interruptedNames = [",
							"    '4.4 IF',",
							"    '5.1',",
							"];",
							"var skippedNames = [",
							"    '2.3',",
							"    '3.3',",
							"    '4.1',",
							"    '4.3',",
							"    '5.1.1',",
							"    '5.2.1',",
							"    '5.3',",
							"    '5.3.1',",
							"    '6. Types',",
							"    'Last: Execution Completed',",
							"    'Last: Execution Completed',",
							"    'Last: Execution Completed',",
							"    'Last: Execution Completed',",
							"];",
							"var terminatedNames = [];",
							"",
							"setTimeout(function() {",
							"    checkTasks();",
							"}, 1000);",
							"",
							"function assertTasksWithNamesExistInTasksWithStatus(tasks, taskStatus, names) {",
							"    var tasksWithStatusNames = [];",
							"",
							"    tasks.forEach((task, index) => {",
							"        if (task.taskStatus == taskStatus) {",
							"            tasksWithStatusNames.push(task.processInfo.name);",
							"        }",
							"    });",
							"",
							"    pm.expect(tasksWithStatusNames).to.be.an('array').that.has.lengthOf(names.length);",
							"",
							"    names.forEach((name, index) => {",
							"        pm.expect(tasksWithStatusNames.includes(name)).to.be.true;",
							"    });",
							"}",
							"",
							"function checkTasks() {",
							"    pm.test(\"Tasks correct\", () => {",
							"        pm.sendRequest({",
							"            url: pm.environment.get('apiGatewayBaseUrl') ",
							"                + '/task/get/executionId?executionId='",
							"                + pm.environment.get('executionId'),",
							"            method: 'GET',",
							"        }, function (err, response) {",
							"            if (err) {",
							"                console.error(err);",
							"                return;",
							"            }",
							"",
							"        var tasks = response.json();",
							"",
							"        tasks.forEach((task, index) => {",
							"            if (task.taskStatus == 0) {",
							"                // Save id for future use",
							"                pm.collectionVariables.set('taskId_' + task.processInfo.name, task.id);",
							"            }",
							"        });",
							"",
							"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"",
							"        assertTasksWithNamesExistInTasksWithStatus(tasks, 0, pendingNames);",
							"        assertTasksWithNamesExistInTasksWithStatus(tasks, 1, completedNames);",
							"        assertTasksWithNamesExistInTasksWithStatus(tasks, 2, interruptedNames);",
							"        assertTasksWithNamesExistInTasksWithStatus(tasks, 3, skippedNames);",
							"        assertTasksWithNamesExistInTasksWithStatus(tasks, 4, terminatedNames);",
							"        });",
							"    });",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set('excludeFromTaskCheckTest', true);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/task/get/executionId?executionId={{executionId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"task",
						"get",
						"executionId"
					],
					"query": [
						{
							"key": "executionId",
							"value": "{{executionId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwt}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"setTimeout(function() {}, 1000);",
					"",
					"if (!pm.collectionVariables.get('excludeFromTaskCheckTest')) {",
					"    pm.test(\"Code correct\", () => {",
					"        pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
					"    });",
					"    ",
					"    checkTasks();",
					"}",
					"",
					"function assertTasksWithNamesExistInTasksWithStatus(tasks, taskStatus, names) {",
					"    var tasksWithStatusNames = [];",
					"",
					"    tasks.forEach((task, index) => {",
					"        if (task.taskStatus == taskStatus) {",
					"            tasksWithStatusNames.push(task.processInfo.name);",
					"        }",
					"    });",
					"",
					"    names.forEach((name, index) => {",
					"        console.log(name);",
					"        console.log(tasksWithStatusNames);",
					"        // Assert if 'names' array contains task processInfo name",
					"        pm.expect(tasksWithStatusNames.includes(name)).to.be.true;",
					"    });",
					"}",
					"",
					"function checkTasks() {",
					"    pm.test(\"Tasks correct\", () => {",
					"        pm.sendRequest({",
					"            url: pm.environment.get('apiGatewayBaseUrl') ",
					"                + '/task/get/executionId?executionId='",
					"                + pm.environment.get('executionId'),",
					"            method: 'GET',",
					"        }, function (err, response) {",
					"            if (err) {",
					"                console.error(err);",
					"                return;",
					"            }",
					"",
					"        var tasks = response.json();",
					"",
					"        let newestTask4_1Id = null;",
					"        let newestTask4_2Id = null;",
					"        let newestTask4_4_IFId = null;",
					"",
					"        tasks.forEach((task, index) => {",
					"            if (task.taskStatus == 0) {",
					"                console.log(task.processInfo.name)",
					"                // Save id for future use",
					"                pm.collectionVariables.set('taskId_' + task.processInfo.name, task.id);",
					"",
					"                if (task.processInfo.name == '4.1' && newestTask4_1Id == null) {",
					"                    console.log(\"Setting 4.1 id\" + task.id)",
					"                    newestTask4_1Id = task.id;",
					"                }",
					"",
					"                if (task.processInfo.name == '4.2' && newestTask4_2Id == null) {",
					"                    console.log(\"Setting 4.2 id\" + task.id)",
					"                    newestTask4_2Id = task.id;",
					"                }",
					"",
					"                if (task.processInfo.name == '4.4 IF' && newestTask4_4_IFId == null) {",
					"                    console.log(\"Setting 4.4 IF id\" + task.id)",
					"                    newestTask4_4_IFId = task.id;",
					"                }",
					"            }",
					"        });",
					"",
					"        // Save id for future use",
					"        pm.collectionVariables.set('taskId_4.1', newestTask4_1Id);",
					"        pm.collectionVariables.set('taskId_4.2', newestTask4_2Id);",
					"        pm.collectionVariables.set('taskId_4.4 IF', newestTask4_4_IFId);",
					"",
					"        assertTasksWithNamesExistInTasksWithStatus(tasks, 0, JSON.parse(pm.collectionVariables.get('pendingNames')));",
					"        assertTasksWithNamesExistInTasksWithStatus(tasks, 1, JSON.parse(pm.collectionVariables.get('completedNames')));",
					"        assertTasksWithNamesExistInTasksWithStatus(tasks, 2, JSON.parse(pm.collectionVariables.get('interruptedNames')));",
					"        assertTasksWithNamesExistInTasksWithStatus(tasks, 3, JSON.parse(pm.collectionVariables.get('skippedNames')));",
					"        assertTasksWithNamesExistInTasksWithStatus(tasks, 4, JSON.parse(pm.collectionVariables.get('terminatedNames')));",
					"        });",
					"    });",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "taskId_Test",
			"value": ""
		},
		{
			"key": "taskId_1: Empty",
			"value": ""
		},
		{
			"key": "taskId_2: Merge at end",
			"value": ""
		},
		{
			"key": "taskId_2.1",
			"value": ""
		},
		{
			"key": "taskId_2.2",
			"value": ""
		},
		{
			"key": "taskId_2.3",
			"value": ""
		},
		{
			"key": "taskId_3: Split at start",
			"value": ""
		},
		{
			"key": "taskId_3.1",
			"value": ""
		},
		{
			"key": "taskId_3.2",
			"value": ""
		},
		{
			"key": "taskId_3.3",
			"value": ""
		},
		{
			"key": "taskId_4: Loop and If",
			"value": ""
		},
		{
			"key": "taskId_4.1",
			"value": ""
		},
		{
			"key": "taskId_4.3",
			"value": ""
		},
		{
			"key": "taskId_4.2",
			"value": ""
		},
		{
			"key": "taskId_4.4 IF",
			"value": ""
		},
		{
			"key": "taskId_5: Conclude child tasks",
			"value": ""
		},
		{
			"key": "taskId_5.1",
			"value": ""
		},
		{
			"key": "taskId_5.2",
			"value": ""
		},
		{
			"key": "taskId_5.3",
			"value": ""
		},
		{
			"key": "taskId_5.1.1",
			"value": ""
		},
		{
			"key": "taskId_5.2.1",
			"value": ""
		},
		{
			"key": "taskId_5.3.1",
			"value": ""
		},
		{
			"key": "idToConclude",
			"value": "",
			"type": "string"
		},
		{
			"key": "Function_setNameToConclude",
			"value": ""
		},
		{
			"key": "Function_setExpectedNames",
			"value": ""
		},
		{
			"key": "runningNames",
			"value": ""
		},
		{
			"key": "completedNames",
			"value": ""
		},
		{
			"key": "interruptedNames",
			"value": ""
		},
		{
			"key": "skippedNames",
			"value": ""
		},
		{
			"key": "terminatedNames",
			"value": ""
		},
		{
			"key": "isProcessCreationRequest",
			"value": ""
		},
		{
			"key": "taskId_6: Execution completed",
			"value": ""
		},
		{
			"key": "subTaskId",
			"value": ""
		},
		{
			"key": "subTaskId2",
			"value": ""
		},
		{
			"key": "subTaskId3",
			"value": ""
		},
		{
			"key": "pendingNames",
			"value": ""
		},
		{
			"key": "taskId_6. Types",
			"value": ""
		},
		{
			"key": "taskId_Last: Execution Completed",
			"value": ""
		},
		{
			"key": "excludeFromTaskCheckTest",
			"value": ""
		}
	]
}