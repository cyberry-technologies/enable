{
	"info": {
		"_postman_id": "2a36c9e3-183a-4793-a0de-b0b9e8aadc72",
		"name": "EPIC04_ExecutionInstancesManagementAndInsight",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17538466"
	},
	"item": [
		{
			"name": "register",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{userUsername}}\",\n    \"email\": \"{{userEmail}}\",\n    \"passwordEncrypted\": \"{{userPassword}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/auth/register",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "executeProcessPublishmentVersion",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ProcessPublishmentVersion correctly added\", () => {",
							"    pm.response.to.have.status(204);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/processPublishmentVersion/execute?processPublishmentVersionId={{processPublishmentVersionId}}&userId={{userId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"processPublishmentVersion",
						"execute"
					],
					"query": [
						{
							"key": "processPublishmentVersionId",
							"value": "{{processPublishmentVersionId}}"
						},
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "executeProcessPublishmentVersion",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ProcessPublishmentVersion correctly added\", () => {",
							"    pm.response.to.have.status(204);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/processPublishmentVersion/execute?processPublishmentVersionId={{processPublishmentVersionId}}&userId={{userId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"processPublishmentVersion",
						"execute"
					],
					"query": [
						{
							"key": "processPublishmentVersionId",
							"value": "{{processPublishmentVersionId}}"
						},
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "executeProcessPublishmentVersion",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ProcessPublishmentVersion correctly added\", () => {",
							"    pm.response.to.have.status(204);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/processPublishmentVersion/execute?processPublishmentVersionId={{processPublishmentVersionId}}&userId={{userId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"processPublishmentVersion",
						"execute"
					],
					"query": [
						{
							"key": "processPublishmentVersionId",
							"value": "{{processPublishmentVersionId}}"
						},
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getExecutionsOfUser - check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Empty execution list correctly retrieved\", () => {",
							"    pm.response.to.have.status(200);",
							"    ",
							"    var responseBody = pm.response.json()[2];",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/execution/get/userId?userId={{userId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"execution",
						"get",
						"userId"
					],
					"query": [
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getTasksOfExecution - check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Executions correctly retrieved\", () => {",
							"    pm.response.to.have.status(200);",
							"    ",
							"    var responseBody = pm.response.json();",
							"",
							"    pm.expect(responseBody).to.be.an('array').that.has.lengthOf(0);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/task/get/executionId?executionId={{executionId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"task",
						"get",
						"executionId"
					],
					"query": [
						{
							"key": "executionId",
							"value": "{{executionId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getExecutionsOfUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Empty execution list correctly retrieved\", () => {",
							"    pm.response.to.have.status(200);",
							"    // Set execution id in environment variable",
							"    pm.environment.set('executionId', pm.response.json()[0].id);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/execution/get/userId?userId={{userId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"execution",
						"get",
						"userId"
					],
					"query": [
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Sign in success\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    pm.environment.set('jwt', pm.response.json().token);\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"{{userEmail}}\",\n    \"passwordEncrypted\": \"{{userPassword}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/auth/login",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "getCurrentUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Correct profile\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    var responseBody = pm.response.json();\r",
							"\r",
							"    pm.environment.set('userId', responseBody.id);\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/auth/get",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"auth",
						"get"
					]
				}
			},
			"response": []
		},
		{
			"name": "getProcessPublishmentsOfUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ProcessPublishment list correctly retrieved\", () => {",
							"    pm.response.to.have.status(200);",
							"    // Set processPublishment id in environment variable",
							"    pm.environment.set('processPublishmentId', pm.response.json()[0].id);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/processPublishment/get/userId?userId={{userId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"processPublishment",
						"get",
						"userId"
					],
					"query": [
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getProcessPublishmentVersionsOfProcessPublishment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"ProcessPublishment list correctly retrieved\", () => {",
							"    pm.response.to.have.status(200);",
							"    // Set processPublishment id in environment variable",
							"    pm.environment.set('processPublishmentVersionId', pm.response.json()[0].id);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/processPublishmentVersion/get/processPublishmentId?processPublishmentId={{processPublishmentId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"processPublishmentVersion",
						"get",
						"processPublishmentId"
					],
					"query": [
						{
							"key": "processPublishmentId",
							"value": "{{processPublishmentId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getExecution",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Execution correctly retrieved\", () => {",
							"    pm.response.to.have.status(200);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/execution/get/executionId?executionId={{executionId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"execution",
						"get",
						"executionId"
					],
					"query": [
						{
							"key": "executionId",
							"value": "{{executionId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "claimExecution",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Execution with details correctly retrieved\", () => {",
							"    pm.response.to.have.status(200);",
							"    ",
							"    var execution = pm.response.json();",
							"",
							"    // Assert if execution has main task with correct data",
							"    pm.expect(execution).to.have.property('mainTask');",
							"    pm.expect(execution.mainTask).to.have.property('taskStatus');",
							"    pm.expect(execution.mainTask.taskStatus).to.equal(0);",
							"    pm.expect(execution.mainTask).to.have.property('concludedByUserId');",
							"    pm.expect(execution.mainTask.concludedByUserId).to.equal(null);",
							"    pm.expect(execution.mainTask).to.have.property('claimedByUserId');",
							"    pm.expect(execution.mainTask.claimedByUserId).to.equal(pm.environment.get('userId'));",
							"",
							"    // Assert if main task has process with correct data",
							"    pm.expect(execution.mainTask).to.have.property('processInfo');",
							"    pm.expect(execution.mainTask.processInfo).to.have.property('name');",
							"    pm.expect(execution.mainTask.processInfo.name).to.equal(\"Test\");",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/execution/claim?executionId={{executionId}}&userId={{userId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"execution",
						"claim"
					],
					"query": [
						{
							"key": "executionId",
							"value": "{{executionId}}"
						},
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "completeExecution",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Execution with details correctly retrieved\", () => {",
							"    pm.response.to.have.status(200);",
							"    ",
							"    var execution = pm.response.json();",
							"",
							"    // Assert if execution has main task with correct data",
							"    pm.expect(execution).to.have.property('mainTask');",
							"    pm.expect(execution.mainTask).to.have.property('taskStatus');",
							"    pm.expect(execution.mainTask.taskStatus).to.equal(1);",
							"    pm.expect(execution.mainTask).to.have.property('concludedByUserId');",
							"    pm.expect(execution.mainTask.concludedByUserId).to.equal(pm.environment.get('userId'));",
							"    pm.expect(execution.mainTask).to.have.property('claimedByUserId');",
							"    pm.expect(execution.mainTask.claimedByUserId).to.equal(pm.environment.get('userId'));",
							"",
							"    // Assert if main task has process with correct data",
							"    pm.expect(execution.mainTask).to.have.property('processInfo');",
							"    pm.expect(execution.mainTask.processInfo).to.have.property('name');",
							"    pm.expect(execution.mainTask.processInfo.name).to.equal(\"Test\");",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/execution/complete?executionId={{executionId}}&userId={{userId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"execution",
						"complete"
					],
					"query": [
						{
							"key": "executionId",
							"value": "{{executionId}}"
						},
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getExecutionsOfUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Empty execution list correctly retrieved\", () => {",
							"    pm.response.to.have.status(200);",
							"    // Set execution id in environment variable",
							"    pm.environment.set('executionId', pm.response.json()[0].id);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/execution/get/userId?userId={{userId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"execution",
						"get",
						"userId"
					],
					"query": [
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "interruptExecution",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Execution with details correctly retrieved\", () => {",
							"    pm.response.to.have.status(200);",
							"    ",
							"    var execution = pm.response.json();",
							"",
							"    // Assert if execution has main task with correct data",
							"    pm.expect(execution).to.have.property('mainTask');",
							"    pm.expect(execution.mainTask).to.have.property('taskStatus');",
							"    pm.expect(execution.mainTask.taskStatus).to.equal(2);",
							"    pm.expect(execution.mainTask).to.have.property('concludedByUserId');",
							"    pm.expect(execution.mainTask.concludedByUserId).to.equal(pm.environment.get('userId'));",
							"    pm.expect(execution.mainTask).to.have.property('claimedByUserId');",
							"    pm.expect(execution.mainTask.claimedByUserId).to.equal(null);",
							"",
							"    // Assert if main task has process with correct data",
							"    pm.expect(execution.mainTask).to.have.property('processInfo');",
							"    pm.expect(execution.mainTask.processInfo).to.have.property('name');",
							"    pm.expect(execution.mainTask.processInfo.name).to.equal(\"Test\");",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/execution/interrupt?executionId={{executionId}}&userId={{userId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"execution",
						"interrupt"
					],
					"query": [
						{
							"key": "executionId",
							"value": "{{executionId}}"
						},
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getExecutionsOfUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Empty execution list correctly retrieved\", () => {",
							"    pm.response.to.have.status(200);",
							"    // Set execution id in environment variable",
							"    pm.environment.set('executionId', pm.response.json()[0].id);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/execution/get/userId?userId={{userId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"execution",
						"get",
						"userId"
					],
					"query": [
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "terminateExecution",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Execution with details correctly retrieved\", () => {",
							"    pm.response.to.have.status(200);",
							"    ",
							"    var execution = pm.response.json();",
							"",
							"    // Assert if execution has main task with correct data",
							"    pm.expect(execution).to.have.property('mainTask');",
							"    pm.expect(execution.mainTask).to.have.property('taskStatus');",
							"    pm.expect(execution.mainTask.taskStatus).to.equal(4);",
							"    pm.expect(execution.mainTask).to.have.property('concludedByUserId');",
							"    pm.expect(execution.mainTask.concludedByUserId).to.equal(pm.environment.get('userId'));",
							"    pm.expect(execution.mainTask).to.have.property('claimedByUserId');",
							"    pm.expect(execution.mainTask.claimedByUserId).to.equal(null);",
							"",
							"    // Assert if main task has process with correct data",
							"    pm.expect(execution.mainTask).to.have.property('processInfo');",
							"    pm.expect(execution.mainTask.processInfo).to.have.property('name');",
							"    pm.expect(execution.mainTask.processInfo.name).to.equal(\"Test\");",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/execution/terminate?executionId={{executionId}}&userId={{userId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"execution",
						"terminate"
					],
					"query": [
						{
							"key": "executionId",
							"value": "{{executionId}}"
						},
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "deleteExecution",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Execution with details correctly retrieved\", () => {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"setTimeout(function() {}, 1000);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/execution/delete?executionId={{executionId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"execution",
						"delete"
					],
					"query": [
						{
							"key": "executionId",
							"value": "{{executionId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwt}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"setTimeout(function() {}, 1000);"
				]
			}
		}
	],
	"variable": [
		{
			"key": "runningNames",
			"value": ""
		},
		{
			"key": "completedNames",
			"value": ""
		},
		{
			"key": "interruptedNames",
			"value": ""
		},
		{
			"key": "skippedNames",
			"value": ""
		},
		{
			"key": "terminatedNames",
			"value": ""
		},
		{
			"key": "isProcessCreationRequest",
			"value": ""
		},
		{
			"key": "taskId_Test",
			"value": ""
		},
		{
			"key": "taskId_1: Empty",
			"value": ""
		}
	]
}