{
	"info": {
		"_postman_id": "e931e1d0-4a4c-4b51-8f72-51bcc1710562",
		"name": "EPIC03. Task Management",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17538466"
	},
	"item": [
		{
			"name": "getTasksOfExecution",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Executions correctly retrieved\", () => {",
							"    pm.response.to.have.status(200);",
							"    ",
							"    var responseBody = pm.response.json();",
							"",
							"    pm.expect(responseBody).to.be.an('array').that.has.lengthOf(2);",
							"",
							"    var task1 = responseBody[0];",
							"    var task2 = responseBody[1];",
							"",
							"    pm.expect(task1).to.have.property('id');",
							"    pm.expect(task1.id).to.not.be.null;",
							"    ",
							"    pm.expect(task1).to.have.property('executionId');",
							"    pm.expect(task1.executionId).to.not.be.null;",
							"    pm.expect(task1.executionId).to.equal(pm.environment.get('executionId'));",
							"    ",
							"    pm.expect(task1).to.have.property('processFileId');",
							"    pm.expect(task1.processFileId).to.not.be.null;",
							"",
							"    pm.expect(task1).to.have.property('processId');",
							"    pm.expect(task1.processId).to.not.be.null;",
							"    pm.expect(task1.processId).to.equal(0);",
							"",
							"    pm.expect(task1).to.have.property('parentTaskId');",
							"    pm.expect(task1.parentTaskId).to.be.null;",
							"",
							"    pm.expect(task1).to.have.property('status');",
							"    pm.expect(task1.status).to.not.be.null;",
							"    pm.expect(task1.status).to.equal(0);",
							"    ",
							"    pm.expect(task1).to.have.property('process');",
							"    pm.expect(task1.process).to.not.be.null;",
							"    pm.expect(task1.process).to.have.property('name');",
							"    pm.expect(task1.process.name).to.not.be.null;",
							"    pm.expect(task1.process.name).to.equal('Test');",
							"",
							"",
							"    pm.expect(task2).to.have.property('id');",
							"    pm.expect(task2.id).to.not.be.null;",
							"    ",
							"    pm.expect(task2).to.have.property('executionId');",
							"    pm.expect(task2.executionId).to.not.be.null;",
							"    pm.expect(task2.executionId).to.equal(pm.environment.get('executionId'));",
							"    ",
							"    pm.expect(task2).to.have.property('processFileId');",
							"    pm.expect(task2.processFileId).to.not.be.null;",
							"",
							"    pm.expect(task2).to.have.property('processId');",
							"    pm.expect(task2.processId).to.not.be.null;",
							"    pm.expect(task2.processId).to.equal(1);",
							"",
							"    pm.expect(task2).to.have.property('parentTaskId');",
							"    pm.expect(task2.parentTaskId).to.not.be.null;",
							"    pm.expect(task2.parentTaskId).to.equal(task1.id);",
							"",
							"    pm.expect(task2).to.have.property('status');",
							"    pm.expect(task2.status).to.not.be.null;",
							"    pm.expect(task2.status).to.equal(0);",
							"    ",
							"    pm.expect(task2).to.have.property('process');",
							"    pm.expect(task2.process).to.not.be.null;",
							"    pm.expect(task2.process).to.have.property('name');",
							"    pm.expect(task2.process.name).to.not.be.null;",
							"    pm.expect(task2.process.name).to.equal('1: Empty');",
							"",
							"    // Set task 1 id as mainTaskId in environment variable",
							"    pm.environment.set('mainTaskId', task1.id);",
							"    // Set task 2 id as subTaskId to collection variable",
							"    pm.collectionVariables.set('subTaskId', task2.id);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/api/task/execution?executionId={{executionId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"api",
						"task",
						"execution"
					],
					"query": [
						{
							"key": "executionId",
							"value": "{{executionId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getTask",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Executions correctly retrieved\", () => {",
							"    pm.response.to.have.status(200);",
							"    ",
							"    var task = pm.response.json();",
							"",
							"    pm.expect(task).to.not.be.null;",
							"",
							"    ",
							"    pm.expect(task).to.have.property('id');",
							"    pm.expect(task.id).to.not.be.null;",
							"    ",
							"    pm.expect(task).to.have.property('executionId');",
							"    pm.expect(task.executionId).to.not.be.null;",
							"    pm.expect(task.executionId).to.equal(pm.environment.get('executionId'));",
							"    ",
							"    pm.expect(task).to.have.property('processFileId');",
							"    pm.expect(task.processFileId).to.not.be.null;",
							"",
							"    pm.expect(task).to.have.property('processId');",
							"    pm.expect(task.processId).to.not.be.null;",
							"    pm.expect(task.processId).to.equal(1);",
							"",
							"    pm.expect(task).to.have.property('parentTaskId');",
							"    pm.expect(task.parentTaskId).to.not.be.null;",
							"    pm.expect(task.parentTaskId).to.equal(pm.environment.get('mainTaskId'));",
							"",
							"    pm.expect(task).to.have.property('status');",
							"    pm.expect(task.status).to.not.be.null;",
							"    pm.expect(task.status).to.equal(0);",
							"    ",
							"    pm.expect(task).to.have.property('process');",
							"    pm.expect(task.process).to.not.be.null;",
							"    pm.expect(task.process).to.have.property('name');",
							"    pm.expect(task.process.name).to.not.be.null;",
							"    pm.expect(task.process.name).to.equal('1: Empty');",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/api/task?id={{subTaskId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"api",
						"task"
					],
					"query": [
						{
							"key": "id",
							"value": "{{subTaskId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "completeTask",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Executions correctly retrieved\", () => {",
							"    pm.response.to.have.status(200);",
							"    ",
							"    var task = pm.response.json();",
							"",
							"    pm.expect(task).to.not.be.null;",
							"",
							"    pm.expect(task).to.have.property('id');",
							"    pm.expect(task.id).to.not.be.null;",
							"    pm.expect(task.id).to.equal(pm.collectionVariables.get('subTaskId'));",
							"",
							"    pm.expect(task).to.have.property('status');",
							"    pm.expect(task.status).to.not.be.null;",
							"    pm.expect(task.status).to.equal(1);",
							"",
							"    pm.expect(task).to.have.property('concludedByUserId');",
							"    pm.expect(task.concludedByUserId).to.not.be.null;",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/api/task/complete?id={{subTaskId}}&userId={{userId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"api",
						"task",
						"complete"
					],
					"query": [
						{
							"key": "id",
							"value": "{{subTaskId}}"
						},
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "[NOT DONE] completeTask - enter data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/api/task/complete?id={{subTaskId}}&userId={{userId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"api",
						"task",
						"complete"
					],
					"query": [
						{
							"key": "id",
							"value": "{{subTaskId}}"
						},
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getTasksOfExecution - check after complete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Executions correctly retrieved\", () => {",
							"    pm.response.to.have.status(200);",
							"    ",
							"    var responseBody = pm.response.json();",
							"",
							"    pm.expect(responseBody).to.be.an('array').that.has.lengthOf(4);",
							"",
							"    pm.expect(responseBody[0].process.name).to.equal('Test');",
							"    pm.expect(responseBody[0].status).to.equal(0);",
							"    pm.expect(responseBody[1].process.name).to.equal('1: Empty');",
							"    pm.expect(responseBody[1].status).to.equal(1);",
							"    pm.expect(responseBody[2].process.name).to.equal('2: Merge at end');",
							"    pm.expect(responseBody[2].status).to.equal(0);",
							"    pm.expect(responseBody[3].process.name).to.equal('2.1');",
							"    pm.expect(responseBody[3].status).to.equal(0);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{apiGatewayBaseUrl}}/api/task/execution?executionId={{executionId}}",
					"host": [
						"{{apiGatewayBaseUrl}}"
					],
					"path": [
						"api",
						"task",
						"execution"
					],
					"query": [
						{
							"key": "executionId",
							"value": "{{executionId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "subTaskId",
			"value": "0"
		},
		{
			"key": "subtaskId",
			"value": ""
		}
	]
}