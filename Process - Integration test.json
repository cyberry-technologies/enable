{"fileName":"Process - Integration test.json","mainProcessId":0,"openedProcessId":16,"selectedProcessId":16,"processes":[{"id":0,"parentProcessId":null,"type":"0","name":"Test","description":"##1: Empty## \nTests the most basic process: one without child processes. It should just be there as the lowest task for a user to complete. Additionally, because it's the first process of the processFile, it should be created when the execution is first created/ run.\n\nOn: Creation of Execution\n-> Running:     Test + 1\n\nOn: Completion of <1: Empty>\n-> Completed:   1\n-> Running:     2 + 2.1\n\n\n##2: Merge at end##\nTests the scenario where 2 connections lead into the end of the parent process. The logic should be: if the end is reached by just 1 connection from a complete process. The parent process is done, as in using a 'return' in code, and all 'Running' processes below are either 'Completed' for the one that reached it first and 'Skipped' for the others that did not.\n\nOn: Completion of 2.1\n-> Completed:   2.1\n-> Running:     2 + 2.2 + 2.3\n\nOn: Completion of 2.2\n-> Completed:   2.1 + 2.2 + 2\n-> Skipped:     2.3\n-> Running:     3 + 3.1 + 3.2\n\n\n##3: Split at Start##\nTests if the correct things happen when a process immediately splits at the start and after when they merge into 1 process again. The logic should be: 1 - When multiple connections come out of a newly completed process, all create a new task with the destination process. 2 - When multiple connections lead into 1 non-parent process, every time an origin process is completed, a new task of the destination is added, even if it already exists or is completed. This behaviour can be captured by using an IF beforehand that uses a boolean to checks if the task is already created. 3 - If one path reaches the end of the parent process, all other paths are skipped.\n\nOn: Completion of 3.1\n-> Completed:   3.1 \n-> Running:     3 + 3.2 + 3.3\n\nOn: Completion of 3.2\n-> Completed:   3.1 + 3.2\n-> Running:     3 + 3.3 + 3.3\n\nOn: Completion of 3.3\n-> Completed:   2 + 3.1 + 3.2 + 3.3 + 3\n-> Skipped:     3.3\n-> Running:     4 + 4.1\n\n\n##4: Loop and if##\nThis tests the loop and IF functionality. IF is an external process that interrupts if the condition is not met, and completes if the condition is met. The logic should constantly create and complete 4.1 and 4.2, and 4.3 every time after 4.1 until the IF condition is met and the parent is completed.\n\nOn: Completion of 4.1\n-> Completed:   4.1\n-> Running:     4.2 + 4.3\n\nOn: Completion of 4.2\n-> Completed:   4.1 + 4.2\n-> Running:     4.1 + 4.3 + 4.4\n\nOn: Completion of 4.3\n-> Completed:   4.1 + 4.2 + 4.3\n-> Running:     4.1 + 4.4\n\nOn: Interruption of 4.4\n-> Completed:   4.1 + 4.2 + 4.3\n-> Interrupted: 4.4\n-> Running:     4.1\n\nOn: Completion of 4.1\n-> Completed:   4.1 + 4.2 + 4.3 + 4.1\n-> Interrupted: 4.4\n-> Running:     4.2 + 4.3\n\nOn: Completion of 4.2\n-> Completed:   3 + 4.1 + 4.2 + 4.3 + 4.1 + 4.2\n-> Interrupted: 4.4\n-> Running:     4.3 + 4.4\n\nOn: Completion of 4.4\n-> Completed:   4.1 + 4.2 + 4.3 + 4.1 + 4.2 + 4.4 + 4 \n-> Interrupted: 4.4\n-> Skipped:     4.3\n-> Running:     5 + 5.1 + 5.2 + 5.3\n\n\n##5: Conclude child tasks##\nThis is about testing the child conclusion functions. The logic should be: When the parent is concluded with 'Interrupted', all the running child tasks should be concluded with 'Interrupted'. When the parent is concluded with 'Completed', all the running child tasks should be concluded with 'Skipped'. This should also happen when the completion leads to the completion of a parent task, in this case the \"sibling\" tasks should be concluded with 'Skipped' as well.\n\nOn: Interruption of 5.1\n-> Interrupted: 5.1 + 5.1.1\n-> Running:     5.2 + 5.2.1 + 5.3 + 5.3.1\n\nOn: Completion of 5.2\n-> Interrupted: 5.1 + 5.1.1\n-> Completed:   5.2 + 5.2.1 + 5\n-> Skipped:     5.3 + 5.3.1\n-> Running:     6\n\n\n##6: Execution completed##\nThis is the final test. When the process is finished, the test process should be finished. It should then show that the execution is also finished and not running anymore. It should still be possible to see the specific tasks and their statuses and results.\n\nOn: Completion of <6: Execution completed>\n-> Completed:   6 + Test + whole execution\n-> Interrupted: No new\n-> Skipped:     No new\n-> Terminated:  None\n-> Running:     None"},{"id":1,"parentProcessId":0,"type":0,"name":"1: Empty","x":15.87311947263649,"y":37.865055387713994,"description":"##1: Empty## \nTests the most basic process: one without child processes. It should just be there as the lowest task for a user to complete. Additionally, because it's the first process of the processFile, it should be created when the execution is first created/ run.\n\nOn: Creation of Execution\n-> Running:     Test + 1\n\nOn: Completion of <1: Empty>\n-> Completed:   1\n-> Running:     Test + 2 + 2.1"},{"id":2,"parentProcessId":0,"type":0,"name":"2: Merge at end","x":26.733674901282512,"y":61.22860020140987,"description":"##2: Merge at end##\nTests the scenario where 2 connections lead into the end of the parent process. The logic should be: if the end is reached by just 1 connection from a complete process. The parent process is done, as in using a 'return' in code, and all 'Running' processes below are either 'Completed' for the one that reached it first and 'Skipped' for the others that did not.\n\nOn: Completion of 2.1\n-> Completed:   2.1\n-> Running:     Test + 2 + 2.2 + 2.3\n\nOn: Completion of 2.2\n-> Completed:   2.1 + 2.2 + 2\n-> Skipped:     2.3\n-> Running:     Test + 3 + 3.1 + 3.2"},{"id":3,"parentProcessId":0,"type":"0","name":"3: Split at start","x":33.20823679143687,"y":37.46223564954683,"description":"##3: Split at Start##\nTests if the correct things happen when a process immediately splits at the start and after when they merge into 1 process again. The logic should be: 1 - When multiple connections come out of a newly completed process, all create a new task with the destination process. 2 - When multiple connections lead into 1 non-parent process, every time an origin process is completed, a new task of the destination is added, even if it already exists or is completed. This behaviour can be captured by using an IF beforehand that uses a boolean to checks if the task is already created. 3 - If one path reaches the end of the parent process, all other paths are skipped.\n\nOn: Completion of 3.1\n-> Completed:   3.1 \n-> Running:     Test + 3 + 3.2 + 3.3\n\nOn: Completion of 3.2\n-> Completed:   3.1 + 3.2\n-> Running:     Test + 3 + 3.3 + 3.3\n\nOn: Completion of 3.3\n-> Completed:   2 + 3.1 + 3.2 + 3.3 + 3\n-> Skipped:     3.3\n-> Running:     4 + 4.1"},{"id":4,"parentProcessId":2,"type":0,"name":"2.1","x":18.57638888888889,"y":49.69249692496925},{"id":5,"parentProcessId":2,"type":0,"name":"2.2","x":54.82491923114578,"y":36.4551863041289},{"id":6,"parentProcessId":2,"type":0,"name":"2.3","x":52.77777777777778,"y":66.54366543665436},{"id":7,"parentProcessId":0,"type":0,"name":"4: Loop and If","x":37.890625,"y":61.83282980866063,"description":"This tests the loop and IF functionality. IF is an external process that interrupts if the condition is not met, and completes if the condition is met. The logic should constantly create and complete 4.1 and 4.2, and 4.3 every time after 4.1 until the IF condition is met and the parent is completed.\n\nOn: Completion of 4.1\n-> Completed:   4.1\n-> Running:     4.2 + 4.3\n\nOn: Completion of 4.2\n-> Completed:   4.1 + 4.2\n-> Running:     4.1 + 4.3 + 4.4\n\nOn: Completion of 4.3\n-> Completed:   4.1 + 4.2 + 4.3\n-> Running:     4.1 + 4.4\n\nOn: Interruption of 4.4\n-> Completed:   4.1 + 4.2 + 4.3\n-> Interrupted: 4.4\n-> Running:     4.1\n\nOn: Completion of 4.1\n-> Completed:   4.1 + 4.2 + 4.3 + 4.1\n-> Interrupted: 4.4\n-> Running:     4.2 + 4.3\n\nOn: Completion of 4.2\n-> Completed:   3 + 4.1 + 4.2 + 4.3 + 4.1 + 4.2\n-> Interrupted: 4.4\n-> Running:     4.3 + 4.4\n\nOn: Completion of 4.4\n-> Completed:   4.1 + 4.2 + 4.3 + 4.1 + 4.2 + 4.4 + 4 \n-> Interrupted: 4.4\n-> Skipped:     4.3\n-> Running:     5 + 5.1 + 5.2 + 5.3"},{"id":8,"parentProcessId":3,"type":0,"name":"3.1","x":28.125,"y":31.61131611316113},{"id":9,"parentProcessId":3,"type":0,"name":"3.2","x":27.430555555555557,"y":62.48462484624846},{"id":10,"parentProcessId":3,"type":0,"name":"3.3","x":60.06944444444444,"y":50.307503075030745},{"id":11,"parentProcessId":7,"type":0,"name":"4.1","x":27.69097222222222,"y":63.59163591635917},{"id":12,"parentProcessId":7,"type":0,"name":"4.2","x":30.03472222222222,"y":36.162361623616235},{"id":13,"parentProcessId":7,"type":0,"name":"4.3","x":61.28472222222222,"y":64.57564575645756},{"id":14,"parentProcessId":7,"type":"2","name":"4.4 IF","x":55.729166666666664,"y":37.63837638376384},{"id":15,"parentProcessId":0,"type":0,"name":"6: Execution completed","x":65.16333257187613,"y":27.391742195367573,"description":"##6: Execution completed##\nThis is the final test. When the process is finished, the test process should be finished. It should then show that the execution is also finished and not running anymore. It should still be possible to see the specific tasks and their statuses and results.\n\nOn: Completion of <6: Execution completed>\n-> Completed:   6 + Test + whole execution\n-> Interrupted: No new\n-> Skipped:     No new\n-> Terminated:  None\n-> Running:     None"},{"id":16,"parentProcessId":0,"type":"0","name":"5: Conclude child tasks","x":60.85069444444444,"y":41.57441574415744,"description":"##5: Conclude child tasks##\nThis is about testing the child conclusion functions. The logic should be: When the parent is concluded with 'Interrupted', all the running child tasks should be concluded with 'Interrupted'. When the parent is concluded with 'Completed', all the running child tasks should be concluded with 'Skipped'. This should also happen when the completion leads to the completion of a parent task, in this case the \"sibling\" tasks should be concluded with 'Skipped' as well. \n\nOn: Interruption of 5.1\n-> Interrupted: 5.1 + 5.1.1\n-> Running:     5.2 + 5.2.1 + 5.3 + 5.3.1\n\nOn: Completion of 5.2\n-> Interrupted: 5.1 + 5.1.1\n-> Completed:   5.2 + 5.2.1 + 5\n-> Skipped:     5.3 + 5.3.1\n-> Running:     6"},{"id":17,"parentProcessId":16,"type":0,"name":"5.1","x":42.53472222222222,"y":29.520295202952028},{"id":18,"parentProcessId":16,"type":0,"name":"5.2","x":41.75347222222222,"y":54.36654366543665},{"id":19,"parentProcessId":16,"type":0,"name":"5.3","x":38.88888888888889,"y":75.89175891758919},{"id":20,"parentProcessId":0,"type":0,"name":"Types","x":69.23604085761838,"y":69.78851963746223},{"id":21,"parentProcessId":17,"type":0,"name":"5.1.1","x":41.05902777777778,"y":49.69249692496925},{"id":22,"parentProcessId":18,"type":0,"name":"5.2.1","x":48.09027777777778,"y":48.33948339483395},{"id":23,"parentProcessId":19,"type":0,"name":"5.3.1","x":46.26736111111111,"y":45.63345633456334}],"connections":[{"id":0,"parentProcessId":0,"originProcessId":0,"destinationProcessId":1,"isParentConnection":true},{"id":1,"parentProcessId":0,"originProcessId":1,"destinationProcessId":2,"isParentConnection":false},{"id":2,"parentProcessId":0,"originProcessId":2,"destinationProcessId":3,"isParentConnection":false},{"id":4,"parentProcessId":2,"originProcessId":2,"destinationProcessId":4,"isParentConnection":true},{"id":5,"parentProcessId":2,"originProcessId":4,"destinationProcessId":5,"isParentConnection":false},{"id":6,"parentProcessId":2,"originProcessId":4,"destinationProcessId":6,"isParentConnection":false},{"id":7,"parentProcessId":2,"originProcessId":6,"destinationProcessId":2,"isParentConnection":true},{"id":8,"parentProcessId":2,"originProcessId":5,"destinationProcessId":2,"isParentConnection":true},{"id":9,"parentProcessId":3,"originProcessId":3,"destinationProcessId":8,"isParentConnection":true},{"id":10,"parentProcessId":3,"originProcessId":3,"destinationProcessId":9,"isParentConnection":true},{"id":11,"parentProcessId":3,"originProcessId":8,"destinationProcessId":10,"isParentConnection":false},{"id":12,"parentProcessId":3,"originProcessId":9,"destinationProcessId":10,"isParentConnection":false},{"id":13,"parentProcessId":3,"originProcessId":10,"destinationProcessId":3,"isParentConnection":true},{"id":14,"parentProcessId":0,"originProcessId":3,"destinationProcessId":7,"isParentConnection":false},{"id":15,"parentProcessId":7,"originProcessId":11,"destinationProcessId":13,"isParentConnection":false},{"id":16,"parentProcessId":7,"originProcessId":11,"destinationProcessId":12,"isParentConnection":false},{"id":17,"parentProcessId":7,"originProcessId":12,"destinationProcessId":11,"isParentConnection":false},{"id":18,"parentProcessId":7,"originProcessId":7,"destinationProcessId":11,"isParentConnection":true},{"id":19,"parentProcessId":7,"originProcessId":14,"destinationProcessId":7,"isParentConnection":true},{"id":20,"parentProcessId":7,"originProcessId":12,"destinationProcessId":14,"isParentConnection":false},{"id":22,"parentProcessId":16,"originProcessId":16,"destinationProcessId":17,"isParentConnection":true},{"id":23,"parentProcessId":16,"originProcessId":16,"destinationProcessId":18,"isParentConnection":true},{"id":24,"parentProcessId":16,"originProcessId":16,"destinationProcessId":19,"isParentConnection":true},{"id":25,"parentProcessId":16,"originProcessId":17,"destinationProcessId":16,"isParentConnection":true},{"id":26,"parentProcessId":16,"originProcessId":18,"destinationProcessId":16,"isParentConnection":true},{"id":27,"parentProcessId":16,"originProcessId":19,"destinationProcessId":16,"isParentConnection":true},{"id":28,"parentProcessId":0,"originProcessId":7,"destinationProcessId":16,"isParentConnection":false},{"id":29,"parentProcessId":0,"originProcessId":15,"destinationProcessId":0,"isParentConnection":true},{"id":30,"parentProcessId":0,"originProcessId":16,"destinationProcessId":15,"isParentConnection":false},{"id":31,"parentProcessId":17,"originProcessId":21,"destinationProcessId":17,"isParentConnection":true},{"id":32,"parentProcessId":17,"originProcessId":17,"destinationProcessId":21,"isParentConnection":true},{"id":33,"parentProcessId":18,"originProcessId":22,"destinationProcessId":18,"isParentConnection":true},{"id":34,"parentProcessId":18,"originProcessId":18,"destinationProcessId":22,"isParentConnection":true},{"id":35,"parentProcessId":19,"originProcessId":23,"destinationProcessId":19,"isParentConnection":true},{"id":36,"parentProcessId":19,"originProcessId":19,"destinationProcessId":23,"isParentConnection":true}]}